<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" media="screen" href="/~d/styles/atom10full.xsl"?><?xml-stylesheet type="text/css" media="screen" href="http://feeds.feedburner.com/~d/styles/itemcontent.css"?><feed xmlns="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:feedburner="http://rssnamespace.org/feedburner/ext/1.0"><title>JBoss Tools Aggregated Feed</title><link rel="alternate" href="http://tools.jboss.org" /><subtitle>JBoss Tools Aggregated Feed</subtitle><dc:creator>JBoss Tools</dc:creator><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="self" type="application/atom+xml" href="http://feeds.feedburner.com/jbossbuzz" /><feedburner:info uri="jbossbuzz" /><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="hub" href="http://pubsubhubbub.appspot.com/" /><entry><title>Use mobile numbers for user authentication in Keycloak</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/gwSgmlh7G8c/" /><category term="Custom authenticator" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="Java" scheme="searchisko:content:tags" /><category term="keycloak" scheme="searchisko:content:tags" /><category term="linux" scheme="searchisko:content:tags" /><category term="Red Hat SSO" scheme="searchisko:content:tags" /><category term="security" scheme="searchisko:content:tags" /><category term="User authentication" scheme="searchisko:content:tags" /><author><name>Siddhartha De</name></author><id>searchisko:content:id:jbossorg_blog-use_mobile_numbers_for_user_authentication_in_keycloak</id><updated>2020-10-23T07:00:59Z</updated><published>2020-10-23T07:00:59Z</published><content type="html">&lt;p&gt;I recently worked on a project that required using a mobile number for user authentication, instead of the traditional username and password. Almost everyone has a unique mobile number, so the requirement made sense. Our authentication tool is &lt;a href="https://developers.redhat.com/blog/2020/08/07/a-deep-dive-into-keycloak/"&gt;Keycloak&lt;/a&gt;, which does not ship with an option for mobile-based authentication. Instead, my team developed a custom authentication executor to meet the requirement.&lt;/p&gt; &lt;p&gt;In this article, I show you how to use Keycloak&amp;#8217;s authentication service provider interface (SPI) to write a custom &lt;code&gt;MobileAuthenticator&lt;/code&gt; class and then instantiate it with an &lt;code&gt;AuthenticationFactory&lt;/code&gt;. I also show you how to package and compile the mobile authentication project using Maven and how to create a custom mobile authentication flow for Keycloak.&lt;/p&gt; &lt;p&gt;&lt;span id="more-693617"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p style="padding-left: 40px;"&gt;&lt;b&gt;Note&lt;/b&gt;: This article assumes that you are familiar with Keycloak, Maven, and &lt;a href="https://developers.redhat.com/products/eap/overview"&gt;Red Hat JBoss Enterprise Application Platform&lt;/a&gt;. &lt;a target="_blank" rel="nofollow" href="https://www.keycloak.org/"&gt;Keycloak&lt;/a&gt; is an open source identity and access management (IAM) tool and is the upstream project for &lt;a href="https://developers.redhat.com/blog/2019/02/07/red-hat-single-sign-on-give-it-a-try-for-no-cost/"&gt;Red Hat Single Sign-On&lt;/a&gt; (Red Hat SSO). Many developers use Keycloak or Red Hat SSO for enterprise security in production environments.&lt;/p&gt; &lt;h2&gt;Creating a custom authenticator with Keycloak&lt;/h2&gt; &lt;p&gt;Keycloak provides an &lt;a target="_blank" rel="nofollow" href="https://www.keycloak.org/docs/latest/server_development/#_auth_spi"&gt;authentication service provider interface&lt;/a&gt; (SPI) that we&amp;#8217;ll use to write a new, custom authenticator. As &lt;a target="_blank" rel="nofollow" href="https://www.keycloak.org/docs/latest/server_development/#packaging-classes-and-deployment"&gt;described in the Keycloak documentation&lt;/a&gt;, we must do the following when we package the custom authenticator:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Package the entire implementation into a single JAR file.&lt;/li&gt; &lt;li&gt;Ensure that the JAR contains a file named &lt;code&gt;org.keycloak.authentication.AuthenticatorFactory&lt;/code&gt;.&lt;/li&gt; &lt;li&gt;Locate the &lt;code&gt;org.keycloak.authentication.AuthenticatorFactory&lt;/code&gt; file in the &lt;code&gt;META-INF/services/&lt;/code&gt; directory.&lt;/li&gt; &lt;li&gt;Ensure that it lists the fully qualified class name for each &lt;code&gt;AuthenticatorFactory&lt;/code&gt; implementation.&lt;/li&gt; &lt;/ul&gt; &lt;h2&gt;The MobileAuthenticator class&lt;/h2&gt; &lt;p&gt;To start, we&amp;#8217;ll create two classes. The first is &lt;code&gt;MobileAuthenticator.java&lt;/code&gt;, which performs the authentication:&lt;/p&gt; &lt;pre&gt;package com.sid.keycloakauthenticator; import java.util.List; import javax.ws.rs.core.MultivaluedMap; import org.keycloak.authentication.AuthenticationFlowContext; import org.keycloak.authentication.Authenticator; import org.keycloak.authentication.authenticators.browser.UsernamePasswordForm; import org.keycloak.events.Errors; import org.keycloak.services.managers.AuthenticationManager; import javax.ws.rs.core.Response; import org.keycloak.authentication.AuthenticationFlowError; import org.keycloak.authentication.authenticators.browser.AbstractUsernameFormAuthenticator; import org.keycloak.events.Details; import org.keycloak.models.ModelDuplicateException; import org.keycloak.models.UserModel; import org.keycloak.services.messages.Messages; /** * @author sid **/ public class MobileAuthenticator extends UsernamePasswordForm implements Authenticator { @Override public boolean validateUserAndPassword(AuthenticationFlowContext context, MultivaluedMap inputData) { String username = inputData.getFirst(AuthenticationManager.FORM_USERNAME); if (username == null) { context.getEvent().error(Errors.USER_NOT_FOUND); Response challengeResponse = challenge(context, Messages.INVALID_USER); context.failureChallenge(AuthenticationFlowError.INVALID_USER, challengeResponse); return false; } // remove leading and trailing whitespace username = username.trim(); context.getEvent().detail(Details.USERNAME, username); context.getAuthenticationSession().setAuthNote(AbstractUsernameFormAuthenticator.ATTEMPTED_USERNAME, username); UserModel user = null; try { List users = context.getSession().users().searchForUserByUserAttribute("mobile", username, context.getRealm()); System.out.println(users.get(0).getUsername()); if (users != null &amp;#38;&amp;#38; users.size() == 1) { user = users.get(0); } } catch (ModelDuplicateException mde) { if (mde.getDuplicateFieldName() != null &amp;#38;&amp;#38; mde.getDuplicateFieldName().equals(UserModel.EMAIL)) { setDuplicateUserChallenge(context, Errors.EMAIL_IN_USE, Messages.EMAIL_EXISTS, AuthenticationFlowError.INVALID_USER); } else { setDuplicateUserChallenge(context, Errors.USERNAME_IN_USE, Messages.USERNAME_EXISTS, AuthenticationFlowError.INVALID_USER); } return false; } if (invalidUser(context, user)) { return false; } if (!validatePassword(context, user, inputData)) { return false; } if (!enabledUser(context, user)) { return false; } String rememberMe = inputData.getFirst("rememberMe"); boolean remember = rememberMe != null &amp;#38;&amp;#38; rememberMe.equalsIgnoreCase("on"); if (remember) { context.getAuthenticationSession().setAuthNote(Details.REMEMBER_ME, "true"); context.getEvent().detail(Details.REMEMBER_ME, "true"); } else { context.getAuthenticationSession().removeAuthNote(Details.REMEMBER_ME); } context.setUser(user); return true; } }&lt;/pre&gt; &lt;h2&gt;The MobileAuthenticationFactory class&lt;/h2&gt; &lt;p&gt;Next, we create &lt;code&gt;MobileAuthenticationFactory.java&lt;/code&gt;, which instantiates the authenticator:&lt;/p&gt; &lt;pre&gt;package com.sid.keycloakauthenticator; import org.keycloak.Config; import org.keycloak.authentication.Authenticator; import org.keycloak.authentication.authenticators.browser.UsernamePasswordFormFactory; import org.keycloak.models.KeycloakSession; /** * @author sid **/ public class MobileAuthenticationFactory extends UsernamePasswordFormFactory { public static final String PROVIDER_ID = "mobile-authenticator"; public static final MobileAuthenticator SINGLETON = new MobileAuthenticator(); @Override public Authenticator create(KeycloakSession session) { return SINGLETON; } @Override public void init(Config.Scope scope) { } @Override public String getId() { return PROVIDER_ID; } @Override public String getDisplayType() { return "Mobile Based User Form"; } @Override public String getHelpText() { return "Validates a mobile and password from login form."; } } &lt;/pre&gt; &lt;h2&gt;Organize and compile the Keycloak custom authenticator&lt;/h2&gt; &lt;p&gt;In this section, we&amp;#8217;ll use Maven to organize the mobile authentication project and compile our two new classes.&lt;/p&gt; &lt;h3&gt;Set up the project&lt;/h3&gt; &lt;p&gt;Execute the following command to create a project using Maven:&lt;/p&gt; &lt;pre&gt;mvn archetype:generate -DgroupId=com.sid.keycloakauthenticator -DartifactId=keycloak-authenticator -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false &lt;/pre&gt; &lt;p&gt;Place both of the classes that we&amp;#8217;ve just created in the &lt;code&gt;src/main/java/com/sid/keycloakauthenticator&lt;/code&gt; path.&lt;/p&gt; &lt;p&gt;Now, create a file named &lt;code&gt;org.keycloak.authentication.AuthenticatorFactory&lt;/code&gt; at &lt;code&gt;src/main/resources/META-INF/services&lt;/code&gt;. Add an entry for the new &lt;code&gt;AuthenticationFactory&lt;/code&gt;: &lt;code&gt;com.sid.keycloakauthenticator.MobileAuthenticationFactory&lt;/code&gt;.&lt;/p&gt; &lt;h3&gt;Resolve the project dependencies&lt;/h3&gt; &lt;p&gt;The Keycloak authentication module is a private SPI, so you are required to use the &lt;code&gt;MANIFEST.MF&lt;/code&gt; to resolve dependencies. Make the following entry in the &lt;code&gt;MANIFEST.MF&lt;/code&gt; at the line &lt;code&gt;src/main/resources/META-INF&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;Dependencies: org.keycloak.keycloak-server-spi-private, org.keycloak.keycloak-services, org.keycloak.keycloak-core, org.keycloak.keycloak-server-spi &lt;/pre&gt; &lt;p&gt;You can now edit the Maven &lt;code&gt;pom.xml&lt;/code&gt; to add the following dependencies:&lt;/p&gt; &lt;pre&gt; &amp;#60;dependency&amp;#62; &amp;#60;groupId&amp;#62;org.keycloak&amp;#60;/groupId&amp;#62; &amp;#60;artifactId&amp;#62;keycloak-core&amp;#60;/artifactId&amp;#62; &amp;#60;version&amp;#62;4.8.3.Final&amp;#60;/version&amp;#62; &amp;#60;scope&amp;#62;provided&amp;#60;/scope&amp;#62; &amp;#60;/dependency&amp;#62; &amp;#60;dependency&amp;#62; &amp;#60;groupId&amp;#62;org.keycloak&amp;#60;/groupId&amp;#62; &amp;#60;artifactId&amp;#62;keycloak-server-spi&amp;#60;/artifactId&amp;#62; &amp;#60;version&amp;#62;4.8.3.Final&amp;#60;/version&amp;#62; &amp;#60;scope&amp;#62;provided&amp;#60;/scope&amp;#62; &amp;#60;/dependency&amp;#62; &amp;#60;dependency&amp;#62; &amp;#60;groupId&amp;#62;org.keycloak&amp;#60;/groupId&amp;#62; &amp;#60;artifactId&amp;#62;keycloak-server-spi-private&amp;#60;/artifactId&amp;#62; &amp;#60;version&amp;#62;4.8.3.Final&amp;#60;/version&amp;#62; &amp;#60;scope&amp;#62;provided&amp;#60;/scope&amp;#62; &amp;#60;/dependency&amp;#62; &amp;#60;dependency&amp;#62; &amp;#60;groupId&amp;#62;org.jboss.logging&amp;#60;/groupId&amp;#62; &amp;#60;artifactId&amp;#62;jboss-logging&amp;#60;/artifactId&amp;#62; &amp;#60;version&amp;#62;3.4.0.Final&amp;#60;/version&amp;#62; &amp;#60;scope&amp;#62;provided&amp;#60;/scope&amp;#62; &amp;#60;/dependency&amp;#62; &amp;#60;dependency&amp;#62; &amp;#60;groupId&amp;#62;org.keycloak&amp;#60;/groupId&amp;#62; &amp;#60;artifactId&amp;#62;keycloak-services&amp;#60;/artifactId&amp;#62; &amp;#60;version&amp;#62;4.8.3.Final&amp;#60;/version&amp;#62; &amp;#60;scope&amp;#62;provided&amp;#60;/scope&amp;#62; &amp;#60;/dependency&amp;#62; &lt;/pre&gt; &lt;h3&gt;Build and deploy the project&lt;/h3&gt; &lt;p&gt;Execute the following command to build the project:&lt;/p&gt; &lt;pre&gt;mvn clean install &lt;/pre&gt; &lt;p&gt;This command generates output in the &lt;code&gt;keycloak-authenticator-1.0-SNAPSHOT.jar&lt;/code&gt; target folder. Keycloak ships bundled with &lt;a target="_blank" rel="nofollow" href="https://www.wildfly.org/"&gt;WildFly&lt;/a&gt;, so you can use the &lt;code&gt;jboss-cli&lt;/code&gt; interface and the following command to deploy the JAR:&lt;/p&gt; &lt;pre&gt;deploy /path/to/keycloak-authenticator-1.0-SNAPSHOT.jar &lt;/pre&gt; &lt;h3&gt;Configure the custom authentication flow&lt;/h3&gt; &lt;p&gt;After you&amp;#8217;ve successfully deployed the authenticator JAR, you will configure the authentication flow. Here&amp;#8217;s how to configure a custom flow in Keycloak:&lt;/p&gt; &lt;ol&gt; &lt;li&gt;Log in into Keycloak management console, select the realm where you want to configure the custom mobile authenticator, and click on &lt;b&gt;Authentication&lt;/b&gt; in the left-side panel&lt;/li&gt; &lt;li&gt;In the &lt;b&gt;Flow&lt;/b&gt; tab, select &lt;strong&gt;Browser&lt;/strong&gt; from the drop-down list.&lt;/li&gt; &lt;li&gt;Click the &lt;strong&gt;Copy&lt;/strong&gt; button and name the flow; for example, MobileFlow.&lt;/li&gt; &lt;li&gt;Under &lt;strong&gt;MobileFlow Forms&lt;/strong&gt;, click the &lt;b&gt;Actions&lt;/b&gt; hyperlink to add executions.&lt;/li&gt; &lt;li&gt;Save the flow by selecting &lt;strong&gt;Mobile Based User Form&lt;/strong&gt; from the provider list.&lt;/li&gt; &lt;li&gt;Delete the &lt;strong&gt;Username Password Form&lt;/strong&gt; and the &lt;strong&gt;OTP Form&lt;/strong&gt;.&lt;/li&gt; &lt;/ol&gt; &lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;That&amp;#8217;s all there is to setting up mobile-based authentication with Keycloak. Note that for the authentication to be successful, you must ensure that every user has a unique mobile number assigned in their attributes.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F23%2Fuse-mobile-numbers-for-user-authentication-in-keycloak%2F&amp;#38;linkname=Use%20mobile%20numbers%20for%20user%20authentication%20in%20Keycloak" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F23%2Fuse-mobile-numbers-for-user-authentication-in-keycloak%2F&amp;#38;linkname=Use%20mobile%20numbers%20for%20user%20authentication%20in%20Keycloak" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F23%2Fuse-mobile-numbers-for-user-authentication-in-keycloak%2F&amp;#38;linkname=Use%20mobile%20numbers%20for%20user%20authentication%20in%20Keycloak" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F23%2Fuse-mobile-numbers-for-user-authentication-in-keycloak%2F&amp;#38;linkname=Use%20mobile%20numbers%20for%20user%20authentication%20in%20Keycloak" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F23%2Fuse-mobile-numbers-for-user-authentication-in-keycloak%2F&amp;#38;linkname=Use%20mobile%20numbers%20for%20user%20authentication%20in%20Keycloak" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F23%2Fuse-mobile-numbers-for-user-authentication-in-keycloak%2F&amp;#38;linkname=Use%20mobile%20numbers%20for%20user%20authentication%20in%20Keycloak" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F23%2Fuse-mobile-numbers-for-user-authentication-in-keycloak%2F&amp;#38;linkname=Use%20mobile%20numbers%20for%20user%20authentication%20in%20Keycloak" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F23%2Fuse-mobile-numbers-for-user-authentication-in-keycloak%2F&amp;#038;title=Use%20mobile%20numbers%20for%20user%20authentication%20in%20Keycloak" data-a2a-url="https://developers.redhat.com/blog/2020/10/23/use-mobile-numbers-for-user-authentication-in-keycloak/" data-a2a-title="Use mobile numbers for user authentication in Keycloak"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/10/23/use-mobile-numbers-for-user-authentication-in-keycloak/"&gt;Use mobile numbers for user authentication in Keycloak&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/gwSgmlh7G8c" height="1" width="1" alt=""/&gt;</content><summary>I recently worked on a project that required using a mobile number for user authentication, instead of the traditional username and password. Almost everyone has a unique mobile number, so the requirement made sense. Our authentication tool is Keycloak, which does not ship with an option for mobile-based authentication. Instead, my team developed a custom authentication executor to meet the requir...</summary><dc:creator>Siddhartha De</dc:creator><dc:date>2020-10-23T07:00:59Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/10/23/use-mobile-numbers-for-user-authentication-in-keycloak/</feedburner:origLink></entry><entry><title>Red Hat talks and workshops at NodeConf Remote 2020</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/WVd6ozNJhTM/" /><category term="CloudEvents" scheme="searchisko:content:tags" /><category term="event-driven" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="javascript" scheme="searchisko:content:tags" /><category term="JavaScript Kubernetes" scheme="searchisko:content:tags" /><category term="Kubernetes" scheme="searchisko:content:tags" /><category term="Node.js" scheme="searchisko:content:tags" /><category term="NodeConfRemote" scheme="searchisko:content:tags" /><category term="openshift" scheme="searchisko:content:tags" /><category term="serverless" scheme="searchisko:content:tags" /><author><name>Lucas Holmquist</name></author><id>searchisko:content:id:jbossorg_blog-red_hat_talks_and_workshops_at_nodeconf_remote_2020</id><updated>2020-10-23T07:00:34Z</updated><published>2020-10-23T07:00:34Z</published><content type="html">&lt;p&gt;Red Hat is heading to &lt;a target="_blank" rel="nofollow" href="https://www.nodeconfremote.com/"&gt;NodeConf Remote 2020&lt;/a&gt; with IBM to demonstrate a few of our favorite production-quality tools and solutions, all designed to help developers maintain their productivity while successfully navigating the vast and rapidly-changing cloud-native landscape.&lt;/p&gt; &lt;p&gt;Attend our conference talks and workshops, or talk with an expert during the virtual booth crawl and get a look at our latest workflows for building cloud-native &lt;a href="https://developers.redhat.com/topics/javascript"&gt;JavaScript&lt;/a&gt; solutions on &lt;a href="https://developers.redhat.com/topics/kubernetes/"&gt;Kubernetes&lt;/a&gt; and &lt;a href="https://developers.redhat.com/openshift"&gt;Red Hat OpenShift&lt;/a&gt;. Our open source experts can show you how to integrate JavaScript and &lt;a href="https://developers.redhat.com/blog/category/node-js/"&gt;Node.js&lt;/a&gt; with other technologies like authentication, distributed data caching and streaming, or business automation.&lt;/p&gt; &lt;h2&gt;Talks&lt;/h2&gt; &lt;p&gt;We&amp;#8217;re offering three talks at NodeConf Remote on topics such as &lt;a href="https://developers.redhat.com/topics/event-driven/"&gt;event-driven&lt;/a&gt; data in &lt;a href="https://developers.redhat.com/topics/serverless-architecture"&gt;serverless&lt;/a&gt; environments, the Node.js ecosystem, and lessons from real-world Node.js deployments. Here is more information on each.&lt;/p&gt; &lt;h3&gt;Serverless with a chance of cloud events&lt;/h3&gt; &lt;p&gt;By: Luke Holmquist (&lt;a href="https://twitter.com/sienaluke" target="_blank" target="_blank" rel="nofollow" noreferrer"&gt;@sienaluke&lt;/a&gt;), Sr. Software Engineer, Red Hat&lt;/p&gt; &lt;p&gt;In this new world of serverless functions, events and their data are the driving factors in triggering these functions. However, event-driven data can come from anywhere and the problem is that most platforms have their own format for how the data is structured.&lt;/p&gt; &lt;p&gt;The lack of a common way to describe events means that as developers, we constantly have to re-learn how to consume these events. But all hope is not lost. This is where CloudEvents can help.&lt;/p&gt; &lt;p&gt;CloudEvents is a specification from the CNCF for describing event data in a common way to help with cross-service and cross-platform communication. In this talk, we show how to use the CloudEvents Javascript SDK to receive and send properly formatted events.&lt;/p&gt; &lt;h3&gt;Chronicles of the Node.js ecosystem&lt;/h3&gt; &lt;p&gt;By: Bethany Griggs, Sr. Software Engineer, Red Hat&lt;/p&gt; &lt;p&gt;The sheer vastness of the Node.js module ecosystem poses challenges for consumers, authors, and maintainers. How do consumers know which of the one million modules to rely on for their production deployments? How do module authors handle their hobby projects evolving into a widespread, critical dependency? What happens to abandoned modules? How can a module author test the impact of their changes on dependent applications? Bethany will highlight these problems, and also showcase the work that the Node.js Package Maintenance team is doing to try and help solve these problems.&lt;/p&gt; &lt;h3&gt;Real-world Node.js success stories&lt;/h3&gt; &lt;p&gt;By: Michael Dawson, Node.js lead for Red Hat and IBM&lt;/p&gt; &lt;p&gt;We all know and love to develop with Node.js, but how and where is it delivering real value in the business world? How can we share what we&amp;#8217;ve learned from these deployments? Join Michael to hear about real-world success stories where Node.js is being used at both large and small scale to deliver value and get the job done; what we&amp;#8217;re doing to capture and share some of the lessons learned.&lt;/p&gt; &lt;h2&gt;Workshops&lt;/h2&gt; &lt;p&gt;We&amp;#8217;re also offering a couple of workshops, one on using Node-RED to build AI-infused web applications, and the other digging into building and deploying Node.js applications on Kubernetes.&lt;/p&gt; &lt;h3&gt;Building cloud-native AI-infused web applications with Node-RED&lt;/h3&gt; &lt;p&gt;By: Nick O’Leary, Node-RED Project Lead and John Walicki, IBM Developer Advocate&lt;br /&gt; Wednesday, 4 November, 12:00-13:30 (Dublin Time, GMT+1)&lt;/p&gt; &lt;p&gt;In this workshop, participants will learn how to use Node-RED and TensorFlow to create a photo booth web application infused with AI. The workshop walks through getting started with Node-RED, creating the web application, and then containerizing it so that it is ready to be deployed into the cloud or onto &lt;a href="https://developers.redhat.com/topics/edge-computing"&gt;edge devices&lt;/a&gt;.&lt;/p&gt; &lt;h3&gt;Kubernetes for JS developers&lt;/h3&gt; &lt;p&gt;By: Joel Lord (&lt;a href="https://twitter.com/joel__lord" target="_blank" target="_blank" rel="nofollow" noreferrer"&gt;@joel__lord&lt;/a&gt;), OpenShift Developer Advocate, Red Hat&lt;br /&gt; Thursday, 5 November, 14:00 &amp;#8211; 15:30 (Dublin Time, GMT+1)&lt;/p&gt; &lt;p&gt;Learn to build and deploy cloud-native Node.js applications on Kubernetes through a series of hands-on lab examples. By the end of this workshop, you’ll be deploying, scaling, and automating JS-based distributed solutions using containers, Kubernetes, and other popular open source tools for distributed computing.&lt;/p&gt; &lt;h2&gt;Learn more&lt;/h2&gt; &lt;p&gt;Learn more about what Red Hat and IBM are up to on the Node.js front on:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Red Hat Developer &amp;#8211; &lt;a href="https://developers.redhat.com/blog/category/node-js/"&gt;https://developers.redhat.com/blog/category/node-js/&lt;/a&gt;&lt;/li&gt; &lt;li&gt;IBM Developer &amp;#8211; &lt;a target="_blank" rel="nofollow" href="https://developer.ibm.com/languages/node-js/"&gt;https://developer.ibm.com/languages/node-js/&lt;/a&gt;&lt;/li&gt; &lt;li&gt;Nodeshift &amp;#8211; &lt;a target="_blank" rel="nofollow" href="https://nodeshift.dev/"&gt;https://nodeshift.dev/ &lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Red Hat is a proud sponsor of NodeConf Remote 2020. We hope to see you there virtually!&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F23%2Fred-hat-talks-and-workshops-at-nodeconf-remote-2020%2F&amp;#38;linkname=Red%20Hat%20talks%20and%20workshops%20at%20NodeConf%20Remote%202020" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F23%2Fred-hat-talks-and-workshops-at-nodeconf-remote-2020%2F&amp;#38;linkname=Red%20Hat%20talks%20and%20workshops%20at%20NodeConf%20Remote%202020" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F23%2Fred-hat-talks-and-workshops-at-nodeconf-remote-2020%2F&amp;#38;linkname=Red%20Hat%20talks%20and%20workshops%20at%20NodeConf%20Remote%202020" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F23%2Fred-hat-talks-and-workshops-at-nodeconf-remote-2020%2F&amp;#38;linkname=Red%20Hat%20talks%20and%20workshops%20at%20NodeConf%20Remote%202020" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F23%2Fred-hat-talks-and-workshops-at-nodeconf-remote-2020%2F&amp;#38;linkname=Red%20Hat%20talks%20and%20workshops%20at%20NodeConf%20Remote%202020" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F23%2Fred-hat-talks-and-workshops-at-nodeconf-remote-2020%2F&amp;#38;linkname=Red%20Hat%20talks%20and%20workshops%20at%20NodeConf%20Remote%202020" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F23%2Fred-hat-talks-and-workshops-at-nodeconf-remote-2020%2F&amp;#38;linkname=Red%20Hat%20talks%20and%20workshops%20at%20NodeConf%20Remote%202020" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F23%2Fred-hat-talks-and-workshops-at-nodeconf-remote-2020%2F&amp;#038;title=Red%20Hat%20talks%20and%20workshops%20at%20NodeConf%20Remote%202020" data-a2a-url="https://developers.redhat.com/blog/2020/10/23/red-hat-talks-and-workshops-at-nodeconf-remote-2020/" data-a2a-title="Red Hat talks and workshops at NodeConf Remote 2020"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/10/23/red-hat-talks-and-workshops-at-nodeconf-remote-2020/"&gt;Red Hat talks and workshops at NodeConf Remote 2020&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/WVd6ozNJhTM" height="1" width="1" alt=""/&gt;</content><summary>Red Hat is heading to NodeConf Remote 2020 with IBM to demonstrate a few of our favorite production-quality tools and solutions, all designed to help developers maintain their productivity while successfully navigating the vast and rapidly-changing cloud-native landscape. Attend our conference talks and workshops, or talk with an expert during the virtual booth crawl and get a look at our latest w...</summary><dc:creator>Lucas Holmquist</dc:creator><dc:date>2020-10-23T07:00:34Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/10/23/red-hat-talks-and-workshops-at-nodeconf-remote-2020/</feedburner:origLink></entry><entry><title>This week in JBoss - 23rd October 2020</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/F9dy_Wrvqv8/weekly-2020-10-23.html" /><category term="codeready" scheme="searchisko:content:tags" /><category term="feed_group_name_global" scheme="searchisko:content:tags" /><category term="feed_name_weeklyeditorial" scheme="searchisko:content:tags" /><category term="infinispan" scheme="searchisko:content:tags" /><category term="Kafka" scheme="searchisko:content:tags" /><category term="keycloak" scheme="searchisko:content:tags" /><category term="micrometer" scheme="searchisko:content:tags" /><category term="microprofile" scheme="searchisko:content:tags" /><category term="mutiny" scheme="searchisko:content:tags" /><category term="news" scheme="searchisko:content:tags" /><category term="openshift" scheme="searchisko:content:tags" /><category term="quarkus" scheme="searchisko:content:tags" /><category term="weekly_editorial" scheme="searchisko:content:tags" /><category term="weekly_update" scheme="searchisko:content:tags" /><author><name>Paul Robinson</name></author><id>searchisko:content:id:jbossorg_blog-this_week_in_jboss_23rd_october_2020</id><updated>2020-10-23T00:00:00Z</updated><published>2020-10-23T00:00:00Z</published><content type="html">&lt;article class="" data-tags="news, weekly_update, weekly_editorial, kafka, quarkus, infinispan, keycloak, openshift, micrometer, microprofile, mutiny, codeready"&gt; &lt;h1&gt;This week in JBoss - 23rd October 2020&lt;/h1&gt; &lt;p class="preamble"&gt;&lt;/p&gt;&lt;p&gt;Welcome to another edition of the JBoss Editorial where we bring you articles and news from across the JBoss Community of projects.&lt;/p&gt;&lt;p&gt;&lt;/p&gt; &lt;div class="sect1"&gt; &lt;h2 id="_micrometer_is_recommended_for_metrics_with_quarkus_1_9"&gt;Micrometer is recommended for metrics with Quarkus 1.9&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;p&gt;In &lt;a href="https://quarkus.io/blog/micrometer-metrics/"&gt;this post&lt;/a&gt;, Ken explains why the Quarkus team are now reccomending the use of the Micrometer Quarkus extension over the previous Eclipse MicroProfile Metrics extension.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="_kafka_how_to_fail_gracefully"&gt;Kafka - How to fail gracefully&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;p&gt;Failures are inevitable. There is nothing we can do about that, and that also applies to Kafka applications. Your application may contain a faulty component misbehaving once in a while, or unable to process a specific Kafka record. In &lt;a href="https://quarkus.io/blog/kafka-failure-strategy/"&gt;this post&lt;/a&gt;, Clement explains how to manage these failures.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="_use_mobile_numbers_for_user_authentication_in_keycloak"&gt;Use mobile numbers for user authentication in Keycloak&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;p&gt;In &lt;a href="https://developers.redhat.com/blog/2020/10/23/use-mobile-numbers-for-user-authentication-in-keycloak/"&gt;this post&lt;/a&gt; Siddhartha De explains how to extend Keycloak to use mobile-based authentication. The post explains the need for mobile-authentication and shows, hands on, how to use the Keycloak service provider interface to create this extension.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="_securely_connect_quarkus_and_red_hat_data_grid_on_red_hat_openshift"&gt;Securely connect Quarkus and Red Hat Data Grid on Red Hat OpenShift&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;p&gt;Continuing on the theme of security, James Falkner explains (&lt;a href="https://developers.redhat.com/blog/2020/10/15/securely-connect-quarkus-and-red-hat-data-grid-on-red-hat-openshift/"&gt;here&lt;/a&gt;) how to secure applications deployed on Red Hat OpenShift that use the &lt;a href="https://quarkus.io/guides/infinispan-client"&gt;Quarkus Data Grid Extension&lt;/a&gt;.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="_creating_a_payments_architecture"&gt;Creating a Payments Architecture&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;p&gt;Eric continues his blog series looking at how Cloud technologies are changing the way we architect and deliver software, in particular how these technologies will apply to the Payment Services industry. This week Eric describes a &lt;a href="https://www.schabell.org/2020/10/payments-architecture-financial-calculations-example.html"&gt;Financial Calculations Example&lt;/a&gt;&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="_mutiny_how_does_retry_retries"&gt;Mutiny - How does retry…​ retries?&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;p&gt;Clement was recently helping a community Quarkus user understand how to retry asynchronous operations with Mutiny. In doing so, he realised it was not all that simple to understand, and so he created &lt;a href="https://quarkus.io/blog/uni-retry/"&gt;this blog post&lt;/a&gt; so that the whole community could benefit from his explanation.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="_codeready_containers_building_a_cloud_native_human_resources_process"&gt;CodeReady Containers - Building a Cloud-Native Human Resources Process&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;p&gt;In &lt;a href="https://www.schabell.org/2020/10/codeready-containers-building-cloud-native-hr-process.html"&gt;this blog post&lt;/a&gt; Eric talks you through how to install process automation developer tooling into a running Openshift Container platform. You can also refer to one of &lt;a href="https://gitlab.com/redhatdemocentral/ocp-install-demo"&gt;Eric’s previous posts&lt;/a&gt; for details on how to easily get Openshift Container Platform running on your local machine.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="_new_releases"&gt;New Releases&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="ulist"&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The &lt;a href="https://quarkus.io/"&gt;Quarkus team&lt;/a&gt; have announced the release of &lt;a href="https://quarkus.io/blog/quarkus-1-9-0-final-released/"&gt;Quarkus 1.9&lt;/a&gt; and &lt;a href="https://quarkus.io/blog/intellij-quarkus-tools-1.2.0/"&gt;Quarkus Tools for IntelliJ 1.2.0&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="author"&gt; &lt;pfe-avatar pfe-shape="circle" pfe-pattern="squares" pfe-src="/img/people/paul-robinson.png"&gt;&lt;/pfe-avatar&gt; &lt;span&gt;Paul Robinson&lt;/span&gt; &lt;/div&gt;&lt;/article&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/F9dy_Wrvqv8" height="1" width="1" alt=""/&gt;</content><summary>This week in JBoss - 23rd October 2020 Welcome to another edition of the JBoss Editorial where we bring you articles and news from across the JBoss Community of projects. Micrometer is recommended for metrics with Quarkus 1.9 In this post, Ken explains why the Quarkus team are now reccomending the use of the Micrometer Quarkus extension over the previous Eclipse MicroProfile Metrics extension. Kaf...</summary><dc:creator>Paul Robinson</dc:creator><dc:date>2020-10-23T00:00:00Z</dc:date><feedburner:origLink>https://www.jboss.org/posts/weekly-2020-10-23.html</feedburner:origLink></entry><entry><title>Persistent storage in action: Understanding Red Hat OpenShift’s persistent volume framework</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/TQNL8YO2D0o/" /><category term="Containers" scheme="searchisko:content:tags" /><category term="devops" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="Kubernetes" scheme="searchisko:content:tags" /><category term="openshift" scheme="searchisko:content:tags" /><category term="persistent storage" scheme="searchisko:content:tags" /><category term="persistent volume" scheme="searchisko:content:tags" /><category term="storage architecture" scheme="searchisko:content:tags" /><author><name>Bryant Son</name></author><id>searchisko:content:id:jbossorg_blog-persistent_storage_in_action_understanding_red_hat_openshift_s_persistent_volume_framework</id><updated>2020-10-22T07:00:05Z</updated><published>2020-10-22T07:00:05Z</published><content type="html">&lt;p&gt;&lt;a href="https://developers.redhat.com/products/openshift/overview"&gt;Red Hat OpenShift&lt;/a&gt; is an enterprise-ready &lt;a href="https://developers.redhat.com/topics/kubernetes"&gt;Kubernetes&lt;/a&gt; platform that provides a number of different models you can use to deploy an application. &lt;a target="_blank" rel="nofollow" href="https://www.redhat.com/en/openshift-4/"&gt;OpenShift 4.x&lt;/a&gt; uses &lt;a href="https://developers.redhat.com/topics/kubernetes/operators"&gt;Operators&lt;/a&gt; to deploy &lt;a href="https://developers.redhat.com/topics/serverless-architecture"&gt;Kubernetes-native&lt;/a&gt; applications. It also supports &lt;a target="_blank" rel="nofollow" href="https://docs.openshift.com/container-platform/4.5/applications/application_life_cycle_management/odc-working-with-helm-charts-using-developer-perspective.html"&gt;Helm&lt;/a&gt; and traditional template-based deployments. Whatever deployment method you choose, it will be deployed as a wrapper to one or more existing OpenShift resources. Examples include &lt;a target="_blank" rel="nofollow" href="https://docs.openshift.com/container-platform/3.11/rest_api/build_openshift_io/buildconfig-build-openshift-io-v1.html"&gt;BuildConfig&lt;/a&gt;, &lt;a target="_blank" rel="nofollow" href="https://docs.openshift.com/container-platform/3.11/rest_api/apps_openshift_io/deploymentconfig-apps-openshift-io-v1.html"&gt;DeploymentConfig&lt;/a&gt;, and &lt;a target="_blank" rel="nofollow" href="https://docs.openshift.com/container-platform/3.11/rest_api/image_openshift_io/imagestream-image-openshift-io-v1.html"&gt;ImageStream&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;In this article, I introduce you to OpenShift&amp;#8217;s Kubernetes-based persistent volume framework for persistent cluster storage. You will learn how to use OpenShift&amp;#8217;s &lt;a target="_blank" rel="nofollow" href="https://docs.openshift.com/container-platform/3.11/rest_api/core/persistentvolume-core-v1.html"&gt;PersistentVolume&lt;/a&gt; (PV) and &lt;a target="_blank" rel="nofollow" href="https://docs.openshift.com/container-platform/3.11/rest_api/core/persistentvolumeclaim-core-v1.html"&gt;PersistentVolumeClaim&lt;/a&gt; (PVC) objects to provision and request storage resources.&lt;/p&gt; &lt;h2&gt;Defining persistence&lt;/h2&gt; &lt;p&gt;In computer programming, a &lt;em&gt;variable&lt;/em&gt; is a storage address (identified by a memory address) that is paired with an associated symbolic name. Each variable contains a known or unknown quantity of information that represents a value. A variable can temporarily hold a data value, but variables are typically stored only while running in memory, so the data will be lost when the application terminates.&lt;/p&gt; &lt;p&gt;&lt;em&gt;Persistence&lt;/em&gt; occurs when a data value &amp;#8220;&lt;a target="_blank" rel="nofollow" href="https://dictionary.englishtest.info/browse/persist"&gt;continues steadfastly or firmly in some state&lt;/a&gt;&amp;#8221; (definition from Dictionary.com). In contrast to values that persist, some applications programmatically access temporary variable values, which prioritize speed over longevity. These temporary values are considered &lt;em&gt;ephemeral&lt;/em&gt; when the data lasts for only a short time.&lt;/p&gt; &lt;p&gt;For example, imagine your favorite game, such as Angry Birds. You would need to use persistent storage if you wanted to save certain game data to reload every time that you played. You might use ephemeral memory to store the programmatic values representing the scores for your current mission.&lt;/p&gt; &lt;h2&gt;Understanding storage architecture&lt;/h2&gt; &lt;p&gt;Now, let&amp;#8217;s discuss the concepts of persistent storage and ephemeral storage in an OpenShift cluster. The first thing to understand is how persistent storage differs from ephemeral storage. OpenShift treats &lt;code&gt;PersistentVolume&lt;/code&gt; and &lt;code&gt;PersistentVolumeClaim&lt;/code&gt; objects as resources: Like OpenShift APIs, you can use YAML or JSON configuration files to manage them.&lt;/p&gt; &lt;p&gt;In Figure 1, the left side of the diagram illustrates an application that is deployed to an OpenShift project namespace without defining persistent storage. In this example, the data is temporarily stored in Pod 1 and Pod 2 using ephemeral storage. The stored data will be lost when the pods are deleted. The right side illustrates an application deployed to an OpenShift namespace with persistent data storage. In this case, an administrator has provisioned persistent storage in the cluster, and a developer has issued a &lt;code&gt;PersistentVolumeClaim&lt;/code&gt; to request that storage.&lt;/p&gt; &lt;p&gt;The PVC gives Pod 1 and Pod 2 each a &lt;em&gt;volume reference&lt;/em&gt; to the persistent storage. The data storage will be referenced when you deploy the application using a &lt;code&gt;DeploymentConfig&lt;/code&gt; or &lt;code&gt;Deployment&lt;/code&gt; object, and the data will persist even after one or both of the pods is destroyed.&lt;/p&gt; &lt;div id="attachment_751957" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-751957" class="wp-image-751957 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/07/1-1024x576.jpeg" alt="A diagram comparing ephemeral storage and persistent storage." width="640" height="360" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/07/1-1024x576.jpeg 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/1-300x169.jpeg 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/1-768x432.jpeg 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-751957" class="wp-caption-text"&gt;Figure 1: Comparing persistent storage and ephemeral storage.&lt;/p&gt;&lt;/div&gt; &lt;h2&gt;Persistent storage types&lt;/h2&gt; &lt;p&gt;As an OpenShift architect, you decide what type of persistent storage to provide to an application&amp;#8217;s developers. The three popular storage types are file storage, block storage, and object storage.&lt;/p&gt; &lt;h3&gt;Network File System&lt;/h3&gt; &lt;p&gt;The most frequently used type of storage in the persistent volume framework is &lt;a target="_blank" rel="nofollow" href="https://docs.openshift.com/container-platform/3.11/install_config/persistent_storage/persistent_storage_nfs.html"&gt;Network File System&lt;/a&gt; (NFS), or simply &lt;em&gt;file storage&lt;/em&gt;. NFS is a traditional network storage type, providing a path to storage connected over a standard ethernet network. It is relatively inexpensive and is able to store compatible data types. For example, you can store media files such as JPEG and MP3, as well as MySQL or MySQL data. As noted in Figure 2, NFS works best for small and simple file storage or databases.&lt;/p&gt; &lt;p&gt;However, NFS is relatively slow and not the best option for complex applications requiring fast operations. Additionally, NFS expands only by scaling out; it does not scale up, which further restricts its performance. &lt;a target="_blank" rel="nofollow" href="https://www.gluster.org/"&gt;GlusterFS&lt;/a&gt;, &lt;a target="_blank" rel="nofollow" href="https://ceph.io/"&gt;Ceph&lt;/a&gt;, and &lt;a target="_blank" rel="nofollow" href="https://docs.openshift.com/container-platform/3.11/install_config/provisioners.html#deploying-the-aws-efs-provisioner"&gt;Amazon Web Services Elastic File System&lt;/a&gt; (AWS EFS) are examples of NFS.&lt;/p&gt; &lt;div id="attachment_751947" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-751947" class="wp-image-751947 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/07/2-1024x576.jpeg" alt="An illustration of the strengths and weaknesses of Network File System." width="640" height="360" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/07/2-1024x576.jpeg 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/2-300x169.jpeg 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/2-768x432.jpeg 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-751947" class="wp-caption-text"&gt;Figure 2: Network File System&amp;#8217;s strengths and weaknesses.&lt;/p&gt;&lt;/div&gt; &lt;h3&gt;Block storage&lt;/h3&gt; &lt;p&gt;Block storage uses a storage area network (SAN) to deploy and operate on a block of storage spread across a network. SAN-enabled block storage offers faster retrieval and operation times and more efficient operation as compared to NFS. It is ideal for production-quality, structured data for databases such as MySQL and PostgreSQL.&lt;/p&gt; &lt;p&gt;On the downside, block storage is slightly more expensive than NFS, and it has a limited capability for handling metadata. Examples of block storage are &lt;a target="_blank" rel="nofollow" href="https://ceph.io/"&gt;Ceph&lt;/a&gt; and &lt;a target="_blank" rel="nofollow" href="https://docs.openshift.com/container-platform/3.11/install_config/persistent_storage/persistent_storage_aws.html"&gt;AWS Elastic Block Store&lt;/a&gt; (AWS EBS), as shown in Figure 3.&lt;/p&gt; &lt;div id="attachment_751937" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-751937" class="wp-image-751937 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/07/3-1024x576.jpeg" alt="An illustration of the strengths and weaknesses of block storage." width="640" height="360" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/07/3-1024x576.jpeg 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/3-300x169.jpeg 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/3-768x432.jpeg 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-751937" class="wp-caption-text"&gt;Figure 3: Block storage&amp;#8217;s strengths and weaknesses.&lt;/p&gt;&lt;/div&gt; &lt;h3&gt;Object storage&lt;/h3&gt; &lt;p&gt;Object storage&amp;#8217;s popularity has grown exponentially due to the demand for efficient transactions on unstructured files such as photos and videos. It is designed with a flat structure, where the files are broken into pieces and spread across the hardware. Object storage uses HTTP to manipulate and retrieve data. It is highly efficient for unstructured files such as media files and static files, and it uses a pay-as-you-go cost model, which makes it affordable and cost-effective.&lt;/p&gt; &lt;p&gt;On the downside, you cannot use object storage with read-write-many data, so it is not suitable for a database. As shown in Figure 4, &lt;a target="_blank" rel="nofollow" href="https://ceph.io/"&gt;Ceph&lt;/a&gt; and &lt;a target="_blank" rel="nofollow" href="https://docs.openshift.com/container-platform/3.11/install_config/configuring_aws.html"&gt;Amazon Simple Storage Service&lt;/a&gt; (AWS S3) are examples of object storage.&lt;/p&gt; &lt;div id="attachment_751927" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-751927" class="wp-image-751927 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/07/4-1024x576.jpeg" alt="An illustration of the strengths and weaknesses of object storage." width="640" height="360" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/07/4-1024x576.jpeg 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/4-300x169.jpeg 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/4-768x432.jpeg 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-751927" class="wp-caption-text"&gt;Figure 4: Object storage&amp;#8217;s strengths and weaknesses.&lt;/p&gt;&lt;/div&gt; &lt;p style="padding-left: 40px;"&gt;&lt;b&gt;Note&lt;/b&gt;: See &amp;#8220;&lt;a target="_blank" rel="nofollow" href="https://www.redhat.com/en/topics/data-storage/file-block-object-storage"&gt;File storage, block storage, or object storage?&lt;/a&gt;&amp;#8221; for a complete introduction to these storage types.&lt;/p&gt; &lt;h2&gt;Demo: Persistent volume storage in a MySQL database&lt;/h2&gt; &lt;p&gt;With those concepts out of the way, it&amp;#8217;s time for a demonstration. In the next sections, I will demonstrate the usefulness of OpenShift&amp;#8217;s persistent volume framework by deploying a MySQL database, first without and then with persistent volume storage.&lt;/p&gt; &lt;p&gt;For this demonstration, I assume the following about your development environment:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;You have at least developer access to a standard OpenShift 3 or higher cluster. Ideally, you should have admin access. If you don&amp;#8217;t have admin access, then you can skip Step 1 and use your own namespace instead.&lt;/li&gt; &lt;li&gt;Your &lt;code&gt;ImageStream&lt;/code&gt; is correctly configured with the standard MySQL container image.&lt;/li&gt; &lt;li&gt;You have the &lt;a target="_blank" rel="nofollow" href="https://docs.openshift.com/container-platform/3.11/welcome/index.html"&gt;OpenShift command-line interface&lt;/a&gt; (&lt;code&gt;oc&lt;/code&gt;) installed, and you know how to use it.&lt;/li&gt; &lt;/ul&gt; &lt;h2&gt;Step 1: Set up the demo&lt;/h2&gt; &lt;p&gt;The first thing we&amp;#8217;ll do is create a new OpenShift project under its own namespace. You can skip this step if you are assigned to a default namespace. You will be able to use your assigned namespace, but you won&amp;#8217;t be able to create a special project for this demo.&lt;/p&gt; &lt;h3&gt;Create the OpenShift project&lt;/h3&gt; &lt;p&gt;Log in to your OpenShift cluster using the OpenShift CLI (&lt;code&gt;oc&lt;/code&gt;) and use the &lt;code&gt;oc new-project&lt;/code&gt; command to create a new project. As shown in Figure 5, I recommend using the name &amp;#8220;&lt;code&gt;pvc-demo&lt;/code&gt;.&amp;#8221;&lt;/p&gt; &lt;div id="attachment_752087" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-752087" class="wp-image-752087 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/07/1-1024x152.png" alt="Use the OpenShift 'oc new-project' command to create the pvc-demo project." width="640" height="95" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/07/1-1024x152.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/1-300x44.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/1-768x114.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-752087" class="wp-caption-text"&gt;Figure 5: Create a new OpenShift project named pvc-demo.&lt;/p&gt;&lt;/div&gt; &lt;h3&gt;Verify your project defaults&lt;/h3&gt; &lt;p&gt;By default, your OpenShift project uses the &lt;code&gt;mysql&lt;/code&gt; &lt;code&gt;ImageStream&lt;/code&gt; in the &lt;code&gt;openshift&lt;/code&gt; namespace. Run the following command to verify the default (also shown in Figure 6):&lt;/p&gt; &lt;pre&gt;oc get is -n openshift | grep mysql&lt;/pre&gt; &lt;p&gt;Then run the following:&lt;/p&gt; &lt;pre&gt;oc get -o yaml is/mysql -n openshift&lt;/pre&gt; &lt;div id="attachment_752097" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-752097" class="wp-image-752097 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/07/2-1024x456.png" alt="Be sure that the mySQL ImageStream is checked as the project default in your OpenShift namespace." width="640" height="285" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/07/2-1024x456.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/2-300x133.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/2-768x342.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-752097" class="wp-caption-text"&gt;Figure 6: Verify your OpenShift project defaults.&lt;/p&gt;&lt;/div&gt; &lt;h3&gt;Deploy a new MySQL application with ImageStream&lt;/h3&gt; &lt;p&gt;Use the OpenShift &lt;code&gt;oc new-app&lt;/code&gt; command to deploy a new MySQL application with &lt;code&gt;ImageStream&lt;/code&gt;. Note that for this phase of the demo, we are configuring MySQL to use ephemeral storage.&lt;/p&gt; &lt;p&gt;At a minimum, you will need to configure the MySQL username, password, and database name using these three &lt;a target="_blank" rel="nofollow" href="https://docs.openshift.com/container-platform/3.11/using_images/db_images/mysql.html#mysql-environment-variables/"&gt;environment variables&lt;/a&gt;:&lt;/p&gt; &lt;pre&gt;oc new-app -i mysql -e MYSQL_USER=tester -e MYSQL_PASSWORD=Pass1234 -e MYSQL_DATABASE=testdb&lt;/pre&gt; &lt;p&gt;You can change the values for your own project, but note that when MySQL is installed, it initially sets &lt;code&gt;MYSQL_DATABASE&lt;/code&gt; as the default database. The MySQL application deployment will fail if any of these environment variables are missing.&lt;/p&gt; &lt;p&gt;When the MySQL application deployment completes, load the environment variables in each pod. Figure 7 shows the MySQL application deployment with &lt;code&gt;ImageStream&lt;/code&gt; and the &lt;code&gt;MYSQL_USER&lt;/code&gt;, &lt;code&gt;MYSQL_PASSWORD&lt;/code&gt;, and &lt;code&gt;MYSQL_DATABASE&lt;/code&gt; variables.&lt;/p&gt; &lt;div id="attachment_752107" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-752107" class="wp-image-752107 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/07/3-1024x261.png" alt="A new MySQL application deployment with ImageStream using the three required environment variables." width="640" height="163" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/07/3-1024x261.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/3-300x76.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/3-768x195.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-752107" class="wp-caption-text"&gt;Figure 7: Deploy a new MySQL application with ImageStream.&lt;/p&gt;&lt;/div&gt; &lt;h3&gt;Verify that the MySQL pod is running&lt;/h3&gt; &lt;p&gt;Before we move on, let&amp;#8217;s check that our MySQL application is running successfully. First, run &lt;code&gt;oc get all&lt;/code&gt; to verify that the pod&amp;#8217;s status is &lt;code&gt;Running&lt;/code&gt;, as shown in Figure 8.&lt;/p&gt; &lt;div id="attachment_752137" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-752137" class="wp-image-752137 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/07/4-1024x169.png" alt="Run the 'oc get all' command to verify that the pod's status is shown as 'running'." width="640" height="106" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/07/4-1024x169.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/4-300x49.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/4-768x127.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-752137" class="wp-caption-text"&gt;Figure 8: Verify that the MySQL application pod is successfully running.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Another option is to use the OpenShift web console to check the pod&amp;#8217;s status. The pod shown in Figure 9 looks healthy.&lt;/p&gt; &lt;div id="attachment_752147" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-752147" class="wp-image-752147 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/07/5-1024x495.png" alt="Check the MySQL pod's health status in the OpenShift web console." width="640" height="309" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/07/5-1024x495.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/5-300x145.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/5-768x371.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-752147" class="wp-caption-text"&gt;Figure 9: Use the OpenShift web console to check the MySQL pod&amp;#8217;s health status.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;If you open the terminal inside the web console, you can click the name of the pod to inspect its status, as shown in Figure 10.&lt;/p&gt; &lt;div id="attachment_752157" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-752157" class="wp-image-752157 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/07/6-1024x497.png" alt="Use the web terminal to inspect the pod's status." width="640" height="311" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/07/6-1024x497.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/6-300x146.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/6-768x373.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-752157" class="wp-caption-text"&gt;Figure 10: Use the web terminal to inspect the status of the pod.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;From inside the pod, you can click &lt;b&gt;Terminal&lt;/b&gt; to interact directly with the pod, as shown in Figure 11:&lt;/p&gt; &lt;div id="attachment_752167" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-752167" class="wp-image-752167 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/07/7-1024x489.png" alt="Accessing the OpenShift terminal and interacting directly from inside the MySQL pod." width="640" height="306" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/07/7-1024x489.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/7-300x143.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/7-768x366.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-752167" class="wp-caption-text"&gt;Figure 11: Use the OpenShift terminal to interact directly with the MySQL pod.&lt;/p&gt;&lt;/div&gt; &lt;p style="padding-left: 40px;"&gt;&lt;b&gt;Note&lt;/b&gt;: For this demo, we will use the &lt;code&gt;oc&lt;/code&gt; CLI to verify and inspect the pod. You can run the &lt;code&gt;oc printenv | grep MYSQL&lt;/code&gt; command to verify that the environment variables that we specified when we created the pod are shown.&lt;/p&gt; &lt;h2&gt;Step 2: Create the MySQL data with ephemeral storage&lt;/h2&gt; &lt;p&gt;Use &lt;code&gt;oc get pods&lt;/code&gt; to view the pod, then run the shell command inside the pod. Next, enter &lt;code&gt;oc rsh pod&lt;/code&gt; and replace the &lt;code&gt;POD_NAME&lt;/code&gt; variable with the name of the pod that you want to interact with:&lt;/p&gt; &lt;pre&gt;oc rsh pod/POD_NAME &lt;/pre&gt; &lt;p&gt;Once you are inside the pod, use &lt;code&gt;printenv | grep&lt;/code&gt; to verify that the environment variable values are correctly populated, as shown in Figure 12.&lt;/p&gt; &lt;div id="attachment_752177" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-752177" class="wp-image-752177 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/07/8-1024x206.png" alt="Run the 'oc rsh' command to interact with the pod, and verify the emvironment variables." width="640" height="129" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/07/8-1024x206.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/8-300x60.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/8-768x155.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-752177" class="wp-caption-text"&gt;Figure 12: Run &lt;code&gt;oc rsh&lt;/code&gt; to interact with the pod, and verify the environment variables.&lt;/p&gt;&lt;/div&gt; &lt;h3&gt;Create sample MySQL queries&lt;/h3&gt; &lt;p&gt;Next, we&amp;#8217;ll create a file with sample MySQL queries, which will populate the MySQL data for the demo. As shown in Figure 13, I created a sample SQL query file named &lt;code&gt;sample_query.sql&lt;/code&gt; and saved it in my VI text editor.&lt;/p&gt; &lt;div id="attachment_752177" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-752177" class="wp-image-752177 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/07/9-1024x230.png" alt="Create a file with sample MySQL queries to populate the data." width="640" height="129" /&gt;&lt;p id="caption-attachment-752177" class="wp-caption-text"&gt;Figure 13: Create a file with sample MySQL queries to populate the data.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Figure 14 shows the sample SQL queries that I will use for this demo. If you are already familiar with MySQL, feel free to change the queries; just note that your database name must match what you defined with the &lt;code&gt;MYSQL_DATABASE&lt;/code&gt; variable.&lt;/p&gt; &lt;div id="attachment_752207" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-752207" class="wp-image-752207 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/07/10-1024x328.png" alt="Using sample SQL queries saved in /var/lib/mysql." width="640" height="205" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/07/10-1024x328.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/10-300x96.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/10-768x246.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-752207" class="wp-caption-text"&gt;Figure 14: Using sample SQL queries saved in &lt;code&gt;/var/lib/mysql&lt;/code&gt;.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Be sure to save this content into a separate text editor; you will need it later in the article when you reiterate the steps of deleting a pod and re-creating your MySQL data. Also, note that by default, MySQL saves the data into a path called &lt;code&gt;/var/lib/mysql&lt;/code&gt;. We&amp;#8217;ll use this path as the reference for our &lt;code&gt;PersistentVolumeClaim&lt;/code&gt; when we redeploy the application later.&lt;/p&gt; &lt;h3&gt;Run the MySQL queries&lt;/h3&gt; &lt;p&gt;Use the following command to log in to MySQL:&lt;/p&gt; &lt;pre&gt;mysql -u$MYSQL_USER -p$MYSQL_PASSWORD -h$HOSTNAME $MYSQL_DATABASE &lt;/pre&gt; &lt;p&gt;With the exception of &lt;code&gt;$HOSTNAME&lt;/code&gt;, the properties starting with the &lt;code&gt;$&lt;/code&gt; symbol refer to the environment variables that you specified when you deployed the sample application using the OpenShift CLI &lt;code&gt;oc new-app&lt;/code&gt; command. The &lt;code&gt;$HOSTNAME&lt;/code&gt; environment variable refers to the MySQL hostname.&lt;/p&gt; &lt;p&gt;As shown in Figure 15, execute the MySQL &lt;code&gt;source&lt;/code&gt; command to run your MySQL queries from the sample SQL file that you&amp;#8217;ve just created:&lt;/p&gt; &lt;pre&gt;source sample_queries.sql&lt;/pre&gt; &lt;div id="attachment_752217" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-752217" class="wp-image-752217 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/07/11-1024x347.png" alt="Execute the MySQL source command to run MySQL queries from the sample file." width="640" height="217" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/07/11-1024x347.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/11-300x102.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/11-768x260.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-752217" class="wp-caption-text"&gt;Figure 15: Execute the MySQL &lt;code&gt;source&lt;/code&gt; command to run MySQL queries from the sample file.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Finally, run the MySQL &lt;code&gt;show databases&lt;/code&gt; command to verify that each MySQL database was successfully created. Use the &lt;code&gt;use testdb&lt;/code&gt; command to check for the existence of the data and then validate it, as shown in Figure 16.&lt;/p&gt; &lt;div id="attachment_752227" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-752227" class="wp-image-752227 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/07/12-1024x424.png" alt="Run the MySQL 'show databases' command to verify that each MySQL database was successfully created." width="640" height="265" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/07/12-1024x424.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/12-300x124.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/12-768x318.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-752227" class="wp-caption-text"&gt;Figure 16: Check that your MySQL databases were successfully created.&lt;/p&gt;&lt;/div&gt; &lt;h3&gt;Delete the pod&lt;/h3&gt; &lt;p&gt;Now, we&amp;#8217;ll delete the pod and see what happens to the data stored using ephemeral data storage. To exit from the pod, type &lt;code&gt;exit&lt;/code&gt; twice. Then, re-enter the pod and use the OpenShift CLI &lt;code&gt;oc delete pod POD_NAME&lt;/code&gt; command, as shown in Figure 17.&lt;/p&gt; &lt;div id="attachment_752237" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-752237" class="wp-image-752237 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/07/13-1024x146.png" alt="Use the 'oc delete pod POD_NAME' command to delete the pod." width="640" height="91" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/07/13-1024x146.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/13-300x43.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/13-768x110.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-752237" class="wp-caption-text"&gt;Figure 17: Use the &lt;code&gt;oc delete pod POD_NAME&lt;/code&gt; command to delete the pod.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;We used a &lt;code&gt;DeploymentConfig&lt;/code&gt; with &lt;code&gt;ReplicaSet&lt;/code&gt;, so a new instance spins up to replace the one that we&amp;#8217;ve just deleted. Wait a short time, then execute the OpenShift &lt;code&gt;oc get pods&lt;/code&gt; command. You should see that a new pod is running. Connect to the new pod with the &lt;code&gt;oc rsh&lt;/code&gt; command. For my example, the command is &lt;code&gt;oc rsh pod/mysql pnpq4&lt;/code&gt;. When you log in to MySQL, check for the created database table. Unfortunately, the table is empty, as shown in Figure 18.&lt;/p&gt; &lt;div id="attachment_752247" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-752247" class="wp-image-752247 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/07/14-1024x453.png" alt="The created database table is empty." width="640" height="283" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/07/14-1024x453.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/14-300x133.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/14-768x340.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-752247" class="wp-caption-text"&gt;Figure 18: Check for the created database table, which is empty.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Because we configured the pod to use ephemeral storage, we&amp;#8217;ve lost all of our data.&lt;/p&gt; &lt;p&gt;Next, we&amp;#8217;ll deploy the application with a persistent volume claim (PVC).&lt;/p&gt; &lt;h2&gt;Step 3: Create a MySQL application with persistent volume storage&lt;/h2&gt; &lt;p&gt;As I explained at the beginning of this article, we can use a YAML file to define a &lt;code&gt;PersistentVolumeClaim&lt;/code&gt; (PVC) for our MySQL application. To start, create a new file named &lt;code&gt;sample-pvc.yaml&lt;/code&gt;, as shown in Figure 19. (You can name the file whatever you want, as long as the file extension is the same.)&lt;/p&gt; &lt;div id="attachment_752267" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-752267" class="wp-image-752267 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/07/15-1024x222.png" alt="Creating a YAML file to define the PVC for the MySQL application." width="640" height="139" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/07/15-1024x222.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/15-300x65.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/15-768x167.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-752267" class="wp-caption-text"&gt;Figure 19: Create a YAML file to define the PVC for the MySQL application.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Then, run the following to create the PVC:&lt;/p&gt; &lt;pre&gt;oc apply -f sample-pvc.yaml &lt;/pre&gt; &lt;p&gt;Enter the &lt;code&gt;oc get pvc&lt;/code&gt; command to verify that you&amp;#8217;ve just created a PVC definition, as shown in Figure 20.&lt;/p&gt; &lt;div id="attachment_752277" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-752277" class="wp-image-752277 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/07/16-1024x95.png" alt="Execute 'oc get pvc' to verify that you created a PVC definition." width="640" height="59" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/07/16-1024x95.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/16-300x28.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/16-768x71.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-752277" class="wp-caption-text"&gt;Figure 20: Execute the &lt;code&gt;oc get pvc&lt;/code&gt; command to verify that you created a PVC definition.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;We will use this new persistent volume claim soon to modify the MySQL application&amp;#8217;s &lt;code&gt;DeploymentConfig&lt;/code&gt;. But first, let&amp;#8217;s make a slight improvement to the application.&lt;/p&gt; &lt;h3&gt;Create an OpenShift Secret&lt;/h3&gt; &lt;p&gt;You might remember that when we created the MySQL application, we defined the core environment variables (&lt;code&gt;MYSQL_USER&lt;/code&gt;, &lt;code&gt;MYSQL_PASSWORD&lt;/code&gt;, and &lt;code&gt;MYSQL_DATABASE&lt;/code&gt;) in a plain text file. Storing secret or sensitive data as plain text values is a security risk, so let&amp;#8217;s fix that now.&lt;/p&gt; &lt;p&gt;As an alternative to plain text, we can use &lt;a target="_blank" rel="nofollow" href="https://docs.openshift.com/container-platform/3.11/dev_guide/secrets.html"&gt;OpenShift secrets&lt;/a&gt; to store our MySQL environment values. Secrets use &lt;a target="_blank" rel="nofollow" href="https://www.base64decode.org/"&gt;Base64&lt;/a&gt;, which is a highly secure form of encryption.&lt;/p&gt; &lt;p style="padding-left: 40px;"&gt;&lt;b&gt;Note&lt;/b&gt;: Another option would be to store the MySQL values using an optimally secure solution such as &lt;a target="_blank" rel="nofollow" href="https://www.vaultproject.io/"&gt;Vault&lt;/a&gt;. I won&amp;#8217;t describe that option in this article.&lt;/p&gt; &lt;p&gt;The first step to storing the MySQL environment values in a secret is to create a new file with key-value pairs. Then, use the following command to create an OpenShift secret to store the MySQL credential data on the file containing key-value pairs:&lt;/p&gt; &lt;pre&gt;oc create secret generic mysql-sec --from-env-file=mysql-cred.env &lt;/pre&gt; &lt;p&gt;Note that in my example, &lt;code&gt;mysql-sec&lt;/code&gt; is the OpenShift secret name and &lt;code&gt;mysql-cred.env&lt;/code&gt; is the file that contains the MySQL key-value pairs.&lt;/p&gt; &lt;p&gt;Run the &lt;code&gt;oc get secret&lt;/code&gt; and &lt;code&gt;oc get -o yaml secret/mysql-sec&lt;/code&gt; commands to verify that the OpenShift secret was successfully created, as shown in Figure 21.&lt;/p&gt; &lt;div id="attachment_752297" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-752297" class="wp-image-752297 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/07/18-1024x521.png" alt="Run the 'oc get secret' and 'oc get -o yaml secret/mysql-sec' commands." width="640" height="326" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/07/18-1024x521.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/18-300x153.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/18-768x391.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-752297" class="wp-caption-text"&gt;Figure 21: Store encrypted environment values in an OpenShift secret and ensure that it is created.&lt;/p&gt;&lt;/div&gt; &lt;h3&gt;Modify the DeploymentConfig&lt;/h3&gt; &lt;p&gt;Now that we&amp;#8217;ve added a secret, we are ready to redeploy the MySQL application with persistent volume storage. One way to redeploy the MySQL application is to modify the application&amp;#8217;s &lt;code&gt;DeploymentConfig&lt;/code&gt; file. Be aware, however, that the &lt;code&gt;DeploymentConfig&lt;/code&gt; file requires a specific format. An easier option is to use the OpenShift CLI&amp;#8217;s &lt;a target="_blank" rel="nofollow" href="https://docs.openshift.com/container-platform/3.11/cli_reference/basic_cli_operations.html#patch"&gt;oc patch&lt;/a&gt; command.&lt;/p&gt; &lt;p&gt;Start by running the &lt;code&gt;oc get dc&lt;/code&gt; and &lt;code&gt;oc edit dc/mysql&lt;/code&gt; commands, as shown in Figure 22.&lt;/p&gt; &lt;div id="attachment_752307" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-752307" class="wp-image-752307 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/07/19-1024x233.png" alt="Use the 'oc get dc' and 'oc edit dc/mysql' commands to redeploy the DeploymentConfig file." width="640" height="146" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/07/19-1024x233.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/19-300x68.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/19-768x175.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-752307" class="wp-caption-text"&gt;Figure 22: Use the &lt;code&gt;oc get dc&lt;/code&gt; and &lt;code&gt;oc edit dc/mysql&lt;/code&gt; commands to redeploy the &lt;code&gt;DeploymentConfig&lt;/code&gt; file.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Next, replace the direct reference to MySQL&amp;#8217;s environment variable values (under &lt;code&gt;spec.template.spec.containers.env&lt;/code&gt;) with the new secret. Update the value to &lt;code&gt;valueFrom&lt;/code&gt; and use the new &lt;code&gt;secretKeyRef&lt;/code&gt;, as shown in Figure 23. (See the &lt;a target="_blank" rel="nofollow" href="https://docs.openshift.com/container-platform/3.11/dev_guide/secrets.html"&gt;OpenShift secrets&lt;/a&gt; documentation for further reference.)&lt;/p&gt; &lt;div id="attachment_752317" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-752317" class="wp-image-752317 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/07/20-1024x411.png" alt="Replace the reference to MySQL environment variables with the new OpenShift secret." width="640" height="257" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/07/20-1024x411.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/20-300x120.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/20-768x308.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-752317" class="wp-caption-text"&gt;Figure 23: Replace the reference to MySQL environment variables with the new OpenShift secret.&lt;/p&gt;&lt;/div&gt; &lt;h3&gt;Implement the persistent volume claim&lt;/h3&gt; &lt;p&gt;Finally, we&amp;#8217;ve come to our glorious moment: We will make two changes to implement our persistent volume claim.&lt;/p&gt; &lt;p&gt;First, under &lt;code&gt;spec.template.spec.containers&lt;/code&gt;, add a new line after &lt;code&gt;terminationGracePeriodSeconds&lt;/code&gt;. Enter &lt;code&gt;volumes:&lt;/code&gt; and a reference to the persistent volume claim, for instance &lt;code&gt;mysql-volume&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Next, introduce a new line after &lt;code&gt;terminationMessagePolicy&lt;/code&gt;. Enter &lt;code&gt;volumeMounts:&lt;/code&gt; and add a &lt;code&gt;mountPath&lt;/code&gt; with the value set to &lt;code&gt;/var/lib/mysql&lt;/code&gt;. Enter &lt;code&gt;mysql-volume&lt;/code&gt;, which is the volume name that you created in the previous step.&lt;/p&gt; &lt;p&gt;Figure 24 shows these updates. Note that &lt;code&gt;/var/lib/mysql&lt;/code&gt; is the default path that MySQL uses to store its SQL data.&lt;/p&gt; &lt;div id="attachment_752327" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-752327" class="wp-image-752327 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/07/21-1024x739.png" alt="Configure volumes for the PVC and volume mounts." width="640" height="462" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/07/21-1024x739.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/21-300x217.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/21-768x554.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-752327" class="wp-caption-text"&gt;Figure 24: Implement the PVC by configuring volumes for the PVC and volume mounts.&lt;/p&gt;&lt;/div&gt; &lt;h3&gt;Test the pod&lt;/h3&gt; &lt;p&gt;Once the new pod is running, run &lt;code&gt;get pods&lt;/code&gt; to see the new pod in its running state.&lt;/p&gt; &lt;p&gt;Use the &lt;code&gt;rsh pod/POD_NAME&lt;/code&gt; command again to &lt;code&gt;ssh&lt;/code&gt; into the pod, then enter &lt;code&gt;printenv | grep MYSQL&lt;/code&gt;. As shown in Figure 25, you should see that the environment variables were successfully picked up from the secret.&lt;/p&gt; &lt;div id="attachment_752347" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-752347" class="wp-image-752347 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/07/22-1024x594.png" alt="Check that the environment values from the OpenShift secret were successfully stored." width="640" height="371" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/07/22-1024x594.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/22-300x174.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/22-768x445.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-752347" class="wp-caption-text"&gt;Figure 25: On the new pod, check that the environment values from the OpenShift secret are successfully stored.&lt;/p&gt;&lt;/div&gt; &lt;h3&gt;Create and populate a sample MySQL file&lt;/h3&gt; &lt;p&gt;Now, repeat the sequence from Step 2 to create the sample MySQL file again, as shown in Figure 26.&lt;/p&gt; &lt;div id="attachment_752357" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-752357" class="wp-image-752357 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/07/23-1024x372.png" alt="Create and populate a second sample MySQL file." width="640" height="233" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/07/23-1024x372.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/23-300x109.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/23-768x279.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-752357" class="wp-caption-text"&gt;Figure 26: Create and populate a new sample MySQL file.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Log in to the MySQL application and repeat the process for recreating the MySQL data with the &lt;code&gt;source&lt;/code&gt; command. This time, because we have persistent data storage, we won&amp;#8217;t lose the data.&lt;/p&gt; &lt;div id="attachment_752367" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-752367" class="wp-image-752367 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/07/24-1024x615.png" alt="Recreate the MySQL data with persistent data storage." width="640" height="384" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/07/24-1024x615.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/24-300x180.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/24-768x461.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-752367" class="wp-caption-text"&gt;Figure 27: On the MySQL application, recreate the MySQL data with persistent data storage.&lt;/p&gt;&lt;/div&gt; &lt;h3&gt;Verify the MySQL queries&lt;/h3&gt; &lt;p&gt;In the MySQL shell, use the &lt;code&gt;show databases&lt;/code&gt;, &lt;code&gt;show tables&lt;/code&gt;, and &lt;code&gt;SELECT&lt;/code&gt; commands to verify that the MySQL queries work. As shown in Figure 28, you should see that MySQL data was successfully recreated.&lt;/p&gt; &lt;div id="attachment_752377" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-752377" class="wp-image-752377 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/07/25-1024x616.png" alt="Verify that the MySQL queries work and the data exists." width="640" height="385" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/07/25-1024x616.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/25-300x181.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/25-768x462.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-752377" class="wp-caption-text"&gt;Figure 28: Verify that the MySQL queries work, and the data exists.&lt;/p&gt;&lt;/div&gt; &lt;h2&gt;Step 4: Test your application&amp;#8217;s data persistence&lt;/h2&gt; &lt;p&gt;With the persistent volume for storage, we should be assured that our data is secure. To test the application&amp;#8217;s data persistence, exit from the pod and delete it, as shown in Figure 29.&lt;/p&gt; &lt;div id="attachment_752387" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-752387" class="wp-image-752387 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/07/26-1024x154.png" alt="Exit the pod and delete it." width="640" height="96" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/07/26-1024x154.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/26-300x45.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/26-768x115.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-752387" class="wp-caption-text"&gt;Figure 29: Exit the pod and delete it.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;When you reconnect to the new pod and check the MySQL database, verify that the data is still there. As shown in Figure 30, you should see that the MySQL data persists, even after we&amp;#8217;ve deleted the pod.&lt;/p&gt; &lt;div id="attachment_752397" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-752397" class="wp-image-752397 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/07/27-1024x640.png" alt="Verify once more that the MySQL data persists, even after the pod was deleted." width="640" height="400" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/07/27-1024x640.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/27-300x188.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/27-768x480.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-752397" class="wp-caption-text"&gt;Figure 30: Verify that the MySQL data persists, even after the pod was deleted.&lt;/p&gt;&lt;/div&gt; &lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;In this article, you learned the basics of persistent storage and the different storage types that you can use. You also saw a demonstration of OpenShift&amp;#8217;s persistent volume storage in action.&lt;/p&gt; &lt;p&gt;I hope that this article has helped you to understand OpenShift&amp;#8217;s persistent volume storage framework and how to use &lt;code&gt;PersistentVolumeClaim&lt;/code&gt; objects for persistent storage in your OpenShift clusters. Please leave a comment if you have questions about the demonstration in this article.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F22%2Fpersistent-storage-in-action-understanding-red-hat-openshifts-persistent-volume-framework%2F&amp;#38;linkname=Persistent%20storage%20in%20action%3A%20Understanding%20Red%20Hat%20OpenShift%E2%80%99s%20persistent%20volume%20framework" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F22%2Fpersistent-storage-in-action-understanding-red-hat-openshifts-persistent-volume-framework%2F&amp;#38;linkname=Persistent%20storage%20in%20action%3A%20Understanding%20Red%20Hat%20OpenShift%E2%80%99s%20persistent%20volume%20framework" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F22%2Fpersistent-storage-in-action-understanding-red-hat-openshifts-persistent-volume-framework%2F&amp;#38;linkname=Persistent%20storage%20in%20action%3A%20Understanding%20Red%20Hat%20OpenShift%E2%80%99s%20persistent%20volume%20framework" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F22%2Fpersistent-storage-in-action-understanding-red-hat-openshifts-persistent-volume-framework%2F&amp;#38;linkname=Persistent%20storage%20in%20action%3A%20Understanding%20Red%20Hat%20OpenShift%E2%80%99s%20persistent%20volume%20framework" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F22%2Fpersistent-storage-in-action-understanding-red-hat-openshifts-persistent-volume-framework%2F&amp;#38;linkname=Persistent%20storage%20in%20action%3A%20Understanding%20Red%20Hat%20OpenShift%E2%80%99s%20persistent%20volume%20framework" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F22%2Fpersistent-storage-in-action-understanding-red-hat-openshifts-persistent-volume-framework%2F&amp;#38;linkname=Persistent%20storage%20in%20action%3A%20Understanding%20Red%20Hat%20OpenShift%E2%80%99s%20persistent%20volume%20framework" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F22%2Fpersistent-storage-in-action-understanding-red-hat-openshifts-persistent-volume-framework%2F&amp;#38;linkname=Persistent%20storage%20in%20action%3A%20Understanding%20Red%20Hat%20OpenShift%E2%80%99s%20persistent%20volume%20framework" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F22%2Fpersistent-storage-in-action-understanding-red-hat-openshifts-persistent-volume-framework%2F&amp;#038;title=Persistent%20storage%20in%20action%3A%20Understanding%20Red%20Hat%20OpenShift%E2%80%99s%20persistent%20volume%20framework" data-a2a-url="https://developers.redhat.com/blog/2020/10/22/persistent-storage-in-action-understanding-red-hat-openshifts-persistent-volume-framework/" data-a2a-title="Persistent storage in action: Understanding Red Hat OpenShift’s persistent volume framework"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/10/22/persistent-storage-in-action-understanding-red-hat-openshifts-persistent-volume-framework/"&gt;Persistent storage in action: Understanding Red Hat OpenShift&amp;#8217;s persistent volume framework&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/TQNL8YO2D0o" height="1" width="1" alt=""/&gt;</content><summary>Red Hat OpenShift is an enterprise-ready Kubernetes platform that provides a number of different models you can use to deploy an application. OpenShift 4.x uses Operators to deploy Kubernetes-native applications. It also supports Helm and traditional template-based deployments. Whatever deployment method you choose, it will be deployed as a wrapper to one or more existing OpenShift resources. Exam...</summary><dc:creator>Bryant Son</dc:creator><dc:date>2020-10-22T07:00:05Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/10/22/persistent-storage-in-action-understanding-red-hat-openshifts-persistent-volume-framework/</feedburner:origLink></entry><entry><title>CodeReady Containers - Building a Cloud-Native Human Resources Process</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/0LhLJmGLaLU/codeready-containers-building-cloud-native-hr-process.html" /><category term="AppDev" scheme="searchisko:content:tags" /><category term="Automate" scheme="searchisko:content:tags" /><category term="cloud" scheme="searchisko:content:tags" /><category term="CodeReadyContainers" scheme="searchisko:content:tags" /><category term="Containers" scheme="searchisko:content:tags" /><category term="feed_group_name_global" scheme="searchisko:content:tags" /><category term="feed_name_ericschabell" scheme="searchisko:content:tags" /><category term="JBoss" scheme="searchisko:content:tags" /><category term="openshift" scheme="searchisko:content:tags" /><category term="Process Automation Manager" scheme="searchisko:content:tags" /><author><name>Eric D. Schabell</name></author><id>searchisko:content:id:jbossorg_blog-codeready_containers_building_a_cloud_native_human_resources_process</id><updated>2020-10-22T11:17:12Z</updated><published>2020-10-21T05:00:00Z</published><content type="html">&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div style="text-align: left;"&gt;&lt;/div&gt;&lt;div dir="ltr" trbidi="on"&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://1.bp.blogspot.com/-J_MqhyqHCZ0/X5FqBLUR58I/AAAAAAAAxmI/F0e1koyMKpgCmWRNRv2P5Gxdru54yw82QCNcBGAsYHQ/s2048/kira-auf-der-heide-8mj-o2H5PKE-unsplash.jpg" imageanchor="1" style="clear: left; float: left; margin-bottom: 1em; margin-right: 1em;"&gt;&lt;img alt="human resources process" border="0" data-original-height="1365" data-original-width="2048" height="213" src="https://1.bp.blogspot.com/-J_MqhyqHCZ0/X5FqBLUR58I/AAAAAAAAxmI/F0e1koyMKpgCmWRNRv2P5Gxdru54yw82QCNcBGAsYHQ/w320-h213/kira-auf-der-heide-8mj-o2H5PKE-unsplash.jpg" width="320" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;As a cloud-native developer you've &lt;a href="https://gitlab.com/redhatdemocentral/ocp-install-demo" target="_blank"&gt;installed an OpenShift Container Platform&lt;/a&gt; development environment on your local machine, but what's next?&lt;/div&gt;&lt;div dir="ltr" trbidi="on"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div dir="ltr" trbidi="on"&gt;What can you do with the fully stocked container registry provided to you?&lt;/div&gt;&lt;div dir="ltr" trbidi="on"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div dir="ltr" trbidi="on"&gt;There is no better way to learn about container technologies, cloud native methods, and container-based application development than getting hands-on with great open technologies.&lt;/div&gt;&lt;div dir="ltr" trbidi="on"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div dir="ltr" trbidi="on"&gt;This article targets getting you started on your new &lt;a href="https://gitlab.com/redhatdemocentral/ocp-install-demo" target="_blank"&gt;OpenShift Container Platform 4.5&lt;/a&gt; by putting the latest process automation developer tooling at your disposal together with a real project for you to deploy and explore.&amp;nbsp; Even better, if you need more help getting started, we'll provide a free online workshop where you can build this project yourself.&lt;/div&gt;&lt;div dir="ltr" trbidi="on"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div dir="ltr" trbidi="on"&gt;This articles outlines getting started with the&amp;nbsp;&lt;a href="https://www.blogger.com/blog/post/edit/3868547292717970492/3893483255214616703#"&gt;HR Employee Rewards project&lt;/a&gt;&amp;nbsp;on the above installation as default, though you can point this installation to any existing OpenShift Container Platform (pass an IP address). Let's get started right now exploring the new developer tooling for process design, user tasks, forms, rules, and business logic in just a few simple steps.&lt;/div&gt;&lt;a name='more'&gt;&lt;/a&gt;&lt;br /&gt;&lt;h3 data-sourcepos="1:1-3:130" style="background-color: white; color: #444444; font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; margin: 0px; position: relative;"&gt;Process automation developer tooling&lt;/h3&gt;&lt;div data-sourcepos="3:1-4:70" dir="auto" style="background-color: white; color: #444444; font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; font-size: 13px;"&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://1.bp.blogspot.com/-8fEVFoNYtFc/X4Am18bwfpI/AAAAAAAAxlU/DHJ_1--K8qUfFiE-dg6V6gqdsOtTuCJMQCNcBGAsYHQ/s2048/crc-rhpam-architecture.png" style="clear: right; color: #4d469c; float: right; margin-bottom: 1em; margin-left: 1em; text-decoration-line: none;"&gt;&lt;img alt="process automation tooling" border="0" data-original-height="1152" data-original-width="2048" height="180" src="https://1.bp.blogspot.com/-8fEVFoNYtFc/X4Am18bwfpI/AAAAAAAAxlU/DHJ_1--K8qUfFiE-dg6V6gqdsOtTuCJMQCNcBGAsYHQ/w320-h180/crc-rhpam-architecture.png" style="background: transparent; border-radius: 0px; border: 1px solid transparent; box-shadow: rgba(0, 0, 0, 0.2) 0px 0px 0px; padding: 8px; position: relative;" width="320" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;This is how it's going to work, first we're installing the &lt;a href="https://gitlab.com/redhatdemocentral/rhcs-rhpam-install-demo" target="_blank"&gt;Red Hat Process Automation Manager on an OpenShift Container Platform&lt;/a&gt; using the latest provided container catalog image. Next, we're using that toolings API to import the HR employee rewards project.&amp;nbsp;&lt;/div&gt;&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;This means upon logging in, you'll find a project ready to go and it delivers on the promise of a fully functioning developer process automation tooling containerized on your OpenShift Container Platform.&lt;/div&gt;&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;h3 data-sourcepos="1:1-3:130" style="background-color: white; color: #444444; font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; margin: 0px; position: relative;"&gt;Install on CodeReady Containers&lt;/h3&gt;&lt;div&gt;&lt;div&gt;There are two options to install and run this project on the OpenShift Container Platform; use your own existing installation or to install on CodeReady Containers which provides you with a local OpenShift cluster.&lt;/div&gt;&lt;div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://1.bp.blogspot.com/-67tQkyyK36I/X5Fo0Ht0XoI/AAAAAAAAxl8/do3z_epdZNM5XUbxEdvPR3joz0D8NyjeACNcBGAsYHQ/s1545/process-designer-ocp.png" imageanchor="1" style="clear: right; float: right; margin-bottom: 1em; margin-left: 1em;"&gt;&lt;img alt="rewards process" border="0" data-original-height="777" data-original-width="1545" height="161" src="https://1.bp.blogspot.com/-67tQkyyK36I/X5Fo0Ht0XoI/AAAAAAAAxl8/do3z_epdZNM5XUbxEdvPR3joz0D8NyjeACNcBGAsYHQ/w320-h161/process-designer-ocp.png" width="320" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;ol data-sourcepos="15:1-16:0" dir="auto"&gt;&lt;li data-sourcepos="15:1-16:0"&gt;Ensure you have a CodeReady Containers installation:&lt;/li&gt;&lt;/ol&gt;&lt;ul data-sourcepos="17:3-21:0" dir="auto"&gt;&lt;li data-sourcepos="17:3-18:0"&gt;&lt;p data-sourcepos="17:5-17:137"&gt;your own Code Ready Containers installation, if using this you just need to set the variables to point to it in init.{sh|bat} script.&lt;/p&gt;&lt;/li&gt;&lt;li data-sourcepos="19:3-21:0"&gt;&lt;p data-sourcepos="19:5-19:94"&gt;&lt;a href="https://gitlab.com/redhatdemocentral/ocp-install-demo"&gt;CodeReady Containers Easy Install&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;ol data-sourcepos="22:1-25:0" dir="auto" start="2"&gt;&lt;li data-sourcepos="22:1-23:0"&gt;&lt;p data-sourcepos="22:4-22:136"&gt;&lt;a href="https://gitlab.com/redhatdemocentral/rhcs-rewards-demo/-/archive/master/rhcs-rewards-demo-master.zip"&gt;Download and unzip this demo.&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li data-sourcepos="24:1-25:0"&gt;&lt;p data-sourcepos="24:4-24:91"&gt;Run 'init.sh' or 'init.bat' file. 'init.bat' must be run with Administrative privileges:&lt;br /&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;pre class="code highlight js-syntax-highlight plaintext dark" lang="plaintext" v-pre="true"&gt;&lt;code&gt;&lt;span class="line" id="LC1" lang="plaintext"&gt; # If using CodeReady Containers Easy Install project, just add the cluster &lt;/span&gt;&lt;br /&gt;&lt;span class="line" id="LC2" lang="plaintext"&gt; # address to HOST_IP variable found at the top of the init.{sh|bat} files:&lt;/span&gt;&lt;br /&gt;&lt;span class="line" id="LC3" lang="plaintext"&gt; #&lt;/span&gt;&lt;br /&gt;&lt;span class="line" id="LC4" lang="plaintext"&gt; # HOST_IP=api.crc.testing &lt;/span&gt;&lt;br /&gt;&lt;span class="line" id="LC5" lang="plaintext"&gt; # &lt;/span&gt;&lt;br /&gt;&lt;span class="line" id="LC6" lang="plaintext"&gt; # Now run the script without any arguments and it uses the hostname:&lt;/span&gt;&lt;br /&gt;&lt;span class="line" id="LC7" lang="plaintext"&gt; #&lt;/span&gt;&lt;br /&gt;&lt;span class="line" id="LC8" lang="plaintext"&gt; $ ./init.sh&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p data-sourcepos="37:1-37:151" dir="auto"&gt;Log in to the HR Employee Rewards project to start exploring an online employee rewards application (the address will be generated by the init script):&lt;/p&gt;&lt;ul data-sourcepos="39:3-40:0" dir="auto"&gt;&lt;li data-sourcepos="39:3-40:0"&gt;CodeReady Container example: &lt;a href="https://rhcs-rewards-demo-appdev-in-cloud.apps-crc.testing" rel="nofollow noreferrer noopener" target="_blank"&gt;https://rhcs-rewards-demo-appdev-in-cloud.apps-crc.testing&lt;/a&gt; ( u:erics / p:redhatpam1! )&lt;/li&gt;&lt;/ul&gt;&lt;p data-sourcepos="41:1-41:156" dir="auto"&gt;Want to build the Rewards demo from scratch? Try this hands-on &lt;a href="https://bpmworkshop.gitlab.io/rhpam-rewards-workshop" rel="nofollow noreferrer noopener" target="_blank"&gt;online workshop&lt;/a&gt;.&lt;/p&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="feedflare"&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=993ZpP28jA0:86Joad67JL8:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=yIl2AUoC8zA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=993ZpP28jA0:86Joad67JL8:63t7Ie-LG7Y"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=63t7Ie-LG7Y" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=993ZpP28jA0:86Joad67JL8:4cEx4HpKnUU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=993ZpP28jA0:86Joad67JL8:4cEx4HpKnUU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=993ZpP28jA0:86Joad67JL8:F7zBnMyn0Lo"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=993ZpP28jA0:86Joad67JL8:F7zBnMyn0Lo" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=993ZpP28jA0:86Joad67JL8:V_sGLiPBpWU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=993ZpP28jA0:86Joad67JL8:V_sGLiPBpWU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=993ZpP28jA0:86Joad67JL8:qj6IDK7rITs"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=qj6IDK7rITs" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=993ZpP28jA0:86Joad67JL8:gIN9vFwOqvQ"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=993ZpP28jA0:86Joad67JL8:gIN9vFwOqvQ" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/schabell/jboss/~4/993ZpP28jA0" height="1" width="1" alt=""/&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/0LhLJmGLaLU" height="1" width="1" alt=""/&gt;</content><summary>As a cloud-native developer you've installed an OpenShift Container Platform development environment on your local machine, but what's next? What can you do with the fully stocked container registry provided to you? There is no better way to learn about container technologies, cloud native methods, and container-based application development than getting hands-on with great open technologies. This...</summary><dc:creator>Eric D. Schabell</dc:creator><dc:date>2020-10-21T05:00:00Z</dc:date><feedburner:origLink>http://feedproxy.google.com/~r/schabell/jboss/~3/993ZpP28jA0/codeready-containers-building-cloud-native-hr-process.html</feedburner:origLink></entry><entry><title>Get started with Node.js 14 on Red Hat OpenShift</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/BgdS-YXKE4o/" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="javascript" scheme="searchisko:content:tags" /><category term="Kubernetes" scheme="searchisko:content:tags" /><category term="Modern App Dev" scheme="searchisko:content:tags" /><category term="Node.js" scheme="searchisko:content:tags" /><category term="node.js 14" scheme="searchisko:content:tags" /><category term="nullish coalescing" scheme="searchisko:content:tags" /><category term="openshift" scheme="searchisko:content:tags" /><category term="optional chaining" scheme="searchisko:content:tags" /><category term="V8 JavaScript" scheme="searchisko:content:tags" /><author><name>Alexandros Alykiotis</name></author><id>searchisko:content:id:jbossorg_blog-get_started_with_node_js_14_on_red_hat_openshift</id><updated>2020-10-20T07:00:01Z</updated><published>2020-10-20T07:00:01Z</published><content type="html">&lt;p&gt;In April, the Node.js development team released &lt;a href="https://nodejs.org/en/blog/release/v14.0.0/"&gt;Node.js 14&lt;/a&gt;. This major version release, code-named Fermium, will become a long-term support (LTS) release in October 2020.&lt;/p&gt; &lt;p&gt;&lt;img class="alignleft" src="https://developers.redhat.com/blog/wp-content/uploads/2020/09/New_OpenShift_Featured_Image-300x168.png" alt="The Red Hat OpenShift logo." width="271" height="152" /&gt;&lt;/p&gt; &lt;p&gt;Node.js 14 incorporates improvements and new features from the V8 8.1 JavaScript engine. I&amp;#8217;ll introduce two of them: Optional chaining and the nullish coalescing operator. I will also show you how to deploy Node.js 14 on &lt;a href="https://developers.redhat.com/products/openshift/overview"&gt;Red Hat OpenShift&lt;/a&gt;. See the end of the article for a list of resources for learning more about improvements and new features in Node.js 14.&lt;/p&gt; &lt;p style="padding-left: 40px;"&gt;&lt;b&gt;Note&lt;/b&gt;: The &lt;a href="https://developers.redhat.com/products/softwarecollections/overview"&gt;Red Hat Software Collections&lt;/a&gt; team creates and maintains Source-to-Image (S2I) container images for Node.js. They have released an S2I image for Node.js 14.&lt;/p&gt; &lt;h2&gt;Optional chaining in Node.js 14&lt;/h2&gt; &lt;p&gt;JavaScript&amp;#8217;s optional chaining operator (&lt;code&gt;?.&lt;/code&gt;) lets you read the value of a property located deep within a chain of connected objects. With this feature, you do not need to validate each reference in the chain explicitly. Here&amp;#8217;s an example of optional chaining in Node.js 14:&lt;/p&gt; &lt;pre&gt;const adventurer = { name: 'Alice', cat: { name: 'Dinah' } }; console.log(adventurer.dog?.name); // undefined (no error) &lt;/pre&gt; &lt;p&gt;In previous Node.js versions, we might have used the logical AND (&lt;code&gt;&amp;#38;&amp;#38;&lt;/code&gt;) operator to work around this issue, like this:&lt;/p&gt; &lt;pre&gt;console.log(adventurer.dog &amp;#38;&amp;#38; adventurer.dog.name); &lt;/pre&gt; &lt;p&gt;If the operand on the left side of the &lt;code&gt;&amp;#38;&amp;#38;&lt;/code&gt; operator is invalid, then the operand on the right will not be evaluated. Eventually, JavaScript will return an &lt;em&gt;undefined&lt;/em&gt; instead of an error.&lt;/p&gt; &lt;h2&gt;The nullish coalescing operator&lt;/h2&gt; &lt;p&gt;Nullish coalescing (&lt;code&gt;??&lt;/code&gt;) is a logical operator that returns the operand on its right when the operand on its left is null or undefined. Otherwise, it returns its left-hand-side operand:&lt;/p&gt; &lt;pre&gt;null ?? "n/a" // "n/a" undefined ?? "n/a" // "n/a" false ?? true // false 0 ?? 100 // 0 "" ?? "n/a" // "" NaN ?? 0 // NaN &lt;/pre&gt; &lt;p&gt;All of the operands shown in this code snippet are &lt;em&gt;falsy&lt;/em&gt; values, meaning that they evaluate to false when forced into a boolean value. If we had used the more familiar logical OR operator (&lt;code&gt;||&lt;/code&gt;), the evaluation of the previous expressions would be different:&lt;/p&gt; &lt;pre&gt;false || true // true 0 || 100 // 100 "" || "n/a" // "n/a" NaN || 0 // 0 &lt;/pre&gt; &lt;p&gt;When providing a fallback value for a nullable value, we recommend using &lt;code&gt;??&lt;/code&gt; rather than &lt;code&gt;||&lt;/code&gt;.&lt;/p&gt; &lt;h2&gt;Two ways to deploy Node.js 14 on OpenShift&lt;/h2&gt; &lt;p&gt;If you are familiar with the process of using an S2I image, you already know what to do. This discussion is for developers who are new to using S2I images.&lt;/p&gt; &lt;p&gt;There are at least two ways to quickly deploy an application using the new Node.js 14 image. One option is to use the &lt;code&gt;oc new-app command&lt;/code&gt; with a Git repo:&lt;/p&gt; &lt;pre&gt;oc new-app registry.access.redhat.com/rhel8-beta/nodejs-14:latest~https://github.com/nodeshift-starters/nodejs-rest-http oc expose svc/nodejs-rest-http &lt;/pre&gt; &lt;p&gt;Alternatively, you can use the &lt;a target="_blank" rel="nofollow" href="https://www.npmjs.com/package/nodeshift"&gt;Nodeshift module&lt;/a&gt; to deploy a local directory:&lt;/p&gt; &lt;pre&gt;npx nodeshift --dockerImage=registry.access.redhat.com/rhel8-beta/nodejs-14 --expose &lt;/pre&gt; &lt;h2&gt;Get started with Node.js&lt;/h2&gt; &lt;p&gt;I&amp;#8217;ve introduced a couple of the JavaScript language features now available in Node.js 14. I also showed you two simple ways to get started with using Node.js 14 on OpenShift. To &lt;a href="https://developers.redhat.com/blog/category/node-js/"&gt;learn more about using Node.js&lt;/a&gt;, check out Lucas Holmquist&amp;#8217;s &amp;#8220;Modern web applications on OpenShift&amp;#8221; article series:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2018/10/04/modern-web-apps-openshift-part-1/"&gt;Modern web applications on OpenShift: Part 1 — Web apps in two commands&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2018/10/23/modern-web-applications-on-openshift-part-2-using-chained-builds/"&gt;Modern web applications on OpenShift: Part 2 — Using chained builds&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2019/01/17/modern-web-applications-on-openshift-part-3-openshift-as-a-development-environment/"&gt;Modern web applications on OpenShift: Part 3 — OpenShift as a development environment&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;See the &lt;a target="_blank" rel="nofollow" href="https://medium.com/@nodejs/node-js-version-14-available-now-8170d384567e"&gt;Node.js 14 official announcement&lt;/a&gt; for even more about improvements and features in Node.js 14.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F20%2Fget-started-with-node-js-14-on-red-hat-openshift%2F&amp;#38;linkname=Get%20started%20with%20Node.js%2014%20on%20Red%20Hat%20OpenShift" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F20%2Fget-started-with-node-js-14-on-red-hat-openshift%2F&amp;#38;linkname=Get%20started%20with%20Node.js%2014%20on%20Red%20Hat%20OpenShift" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F20%2Fget-started-with-node-js-14-on-red-hat-openshift%2F&amp;#38;linkname=Get%20started%20with%20Node.js%2014%20on%20Red%20Hat%20OpenShift" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F20%2Fget-started-with-node-js-14-on-red-hat-openshift%2F&amp;#38;linkname=Get%20started%20with%20Node.js%2014%20on%20Red%20Hat%20OpenShift" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F20%2Fget-started-with-node-js-14-on-red-hat-openshift%2F&amp;#38;linkname=Get%20started%20with%20Node.js%2014%20on%20Red%20Hat%20OpenShift" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F20%2Fget-started-with-node-js-14-on-red-hat-openshift%2F&amp;#38;linkname=Get%20started%20with%20Node.js%2014%20on%20Red%20Hat%20OpenShift" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F20%2Fget-started-with-node-js-14-on-red-hat-openshift%2F&amp;#38;linkname=Get%20started%20with%20Node.js%2014%20on%20Red%20Hat%20OpenShift" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F20%2Fget-started-with-node-js-14-on-red-hat-openshift%2F&amp;#038;title=Get%20started%20with%20Node.js%2014%20on%20Red%20Hat%20OpenShift" data-a2a-url="https://developers.redhat.com/blog/2020/10/20/get-started-with-node-js-14-on-red-hat-openshift/" data-a2a-title="Get started with Node.js 14 on Red Hat OpenShift"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/10/20/get-started-with-node-js-14-on-red-hat-openshift/"&gt;Get started with Node.js 14 on Red Hat OpenShift&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/BgdS-YXKE4o" height="1" width="1" alt=""/&gt;</content><summary>In April, the Node.js development team released Node.js 14. This major version release, code-named Fermium, will become a long-term support (LTS) release in October 2020. Node.js 14 incorporates improvements and new features from the V8 8.1 JavaScript engine. I’ll introduce two of them: Optional chaining and the nullish coalescing operator. I will also show you how to deploy Node.js 14 on Red Hat ...</summary><dc:creator>Alexandros Alykiotis</dc:creator><dc:date>2020-10-20T07:00:01Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/10/20/get-started-with-node-js-14-on-red-hat-openshift/</feedburner:origLink></entry><entry><title>Let’s collaborate! Take the 2020 Red Hat OpenShift Developer Survey now</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/nWz7T8hBLYE/" /><category term="ci/cd" scheme="searchisko:content:tags" /><category term="Containers" scheme="searchisko:content:tags" /><category term="developer survey" scheme="searchisko:content:tags" /><category term="devops" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="Kubernetes" scheme="searchisko:content:tags" /><category term="Kubernetes developer" scheme="searchisko:content:tags" /><category term="openshift" scheme="searchisko:content:tags" /><category term="openshift developer" scheme="searchisko:content:tags" /><author><name>Serena Chechile Nichols</name></author><id>searchisko:content:id:jbossorg_blog-let_s_collaborate_take_the_2020_red_hat_openshift_developer_survey_now</id><updated>2020-10-16T07:00:39Z</updated><published>2020-10-16T07:00:39Z</published><content type="html">&lt;p&gt;We are always looking for ways to understand better how developers create, build, manage, test, and deploy applications on and for &lt;a href="https://developers.redhat.com/openshift/"&gt;Red Hat OpenShift&lt;/a&gt;. An important part of that effort is the annual &lt;a target="_blank" rel="nofollow" href="https://bit.ly/3cXWfX1"&gt;OpenShift Developer Survey&lt;/a&gt;, which we&amp;#8217;ve just released for 2020.&lt;/p&gt; &lt;p&gt;Keep reading to learn more about the survey, including highlights of the 2019 survey results and what to expect from the survey this year. We also invite you to participate in our OpenShift developer experience office hours and one-to-one feedback sessions for our developer community and customers.&lt;/p&gt; &lt;p&gt;&lt;span id="more-795747"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;The OpenShift Developer Survey&lt;/h2&gt; &lt;p&gt;The annual OpenShift Developer Survey is a critical tool for sharing your experiences as an OpenShift developer. Here’s some of what we learned from developers responding to the 2019 survey:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/topics/enterprise-java"&gt;Java&lt;/a&gt; was the clear leader for languages and tools used for application development on OpenShift.&lt;/li&gt; &lt;li&gt;Most respondents named Jenkins as their &lt;a href="https://developers.redhat.com/topics/ci-cd"&gt;CI/CD&lt;/a&gt; tool of choice.&lt;/li&gt; &lt;li&gt;73% of respondents said that they used source-to-image (S2I) to package applications into a container image (a 10% jump from 2018).&lt;/li&gt; &lt;li&gt;Most respondents expressed overall satisfaction with their OpenShift experience, with room for improvement.&lt;/li&gt; &lt;li&gt;Documentation and help were still top pain points for developers.&lt;/li&gt; &lt;li&gt;Asked what version of OpenShift they used: &lt;ul&gt; &lt;li&gt;19% of respondents had used OpenShift 4.x (only OpenShift 4.1 and 4.2 were released when the survey started).&lt;/li&gt; &lt;li&gt;58% of respondents said that OpenShift 3.11 was the newest version that they had used.&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p style="padding-left: 40px;"&gt;&lt;b&gt;Note&lt;/b&gt;: Survey respondents included developers who interacted with OpenShift or a representative such as their manager or team lead. Red Hat representatives were invited to respond on behalf of their developer clients and customers.&lt;/p&gt; &lt;h2&gt;The OpenShift Developer Survey in 2020&lt;/h2&gt; &lt;p&gt;We use the OpenShift Developer Survey to understand better how developers work with OpenShift—what works and what doesn&amp;#8217;t—as well as the technologies that you rely on the most. Getting a breadth of responses helps us compare data and focus on the technologies and improvements that are key for our developer community and customers.&lt;/p&gt; &lt;p&gt;The &lt;a target="_blank" rel="nofollow" href="https://bit.ly/3cXWfX1"&gt;2020 OpenShift Developer Survey&lt;/a&gt; is open now and continues through November 22, 2020. It takes about seven minutes to complete. We hope that you will participate in the survey and share it with your team. Also, look for a follow-up article in December, where we&amp;#8217;ll report on the survey results.&lt;/p&gt; &lt;h2&gt;New office hours for the OpenShift developer experience&lt;/h2&gt; &lt;p&gt;Our OpenShift developer experience office hours are now weekly. During office hours, we alternate between talking about the future and getting feedback about what is happening right now. Developer advocates demonstrate tools in the OpenShift ecosystem and discuss their coding challenges and mishaps, as well as how they worked through them.&lt;/p&gt; &lt;p&gt;Our weekly OpenShift developer experience office hours are featured on &lt;a target="_blank" rel="nofollow" href="http://openshift.tv"&gt;openshift.tv&lt;/a&gt;, streaming on &lt;a target="_blank" rel="nofollow" href="https://www.openshift.com/streaming/twitch?hsLang=en-us"&gt;Twitch&lt;/a&gt;, &lt;a target="_blank" rel="nofollow" href="https://www.youtube.com/rhopenshift"&gt;YouTube&lt;/a&gt;, and &lt;a target="_blank" rel="nofollow" href="https://www.facebook.com/openshift/"&gt;Facebook Live&lt;/a&gt;. You can also check the &lt;a target="_blank" rel="nofollow" href="https://groups.google.com/forum/#!forum/openshift-dev-users"&gt;openshift-dev-users mailing list&lt;/a&gt; or the &lt;a target="_blank" rel="nofollow" href="https://calendar.google.com/calendar/u/0/embed?src=redhatstreaming@gmail.com"&gt;openshift.tv schedule&lt;/a&gt; for office hours. Or, reach out to the team anytime through any of the channels listed on the &lt;a target="_blank" rel="nofollow" href="https://github.com/openshift/console"&gt;OpenShift Console project homepage&lt;/a&gt;.&lt;/p&gt; &lt;p style="padding-left: 40px;"&gt;&lt;b&gt;Note&lt;/b&gt;: If you haven’t yet experienced it, be sure to check out &lt;a href="https://developers.redhat.com/blog/2020/07/16/whats-new-in-the-openshift-4-5-console-developer-experience/"&gt;What’s new in the OpenShift 4.5 console developer experience&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;Register for a remote feedback session&lt;/h2&gt; &lt;p&gt;As a developer who uses OpenShift, we are very interested in your perspective. We&amp;#8217;re currently inviting developers to participate in remote feedback sessions, where we discuss your technology pain points, validate use cases, and collaborate on future experiences. We&amp;#8217;re also offering customer empathy sessions, where you can let us know what isn&amp;#8217;t working for you.&lt;/p&gt; &lt;p&gt;As always, these sessions are a great opportunity to impact the future of the developer experience on OpenShift. To set up a session, please &lt;a target="_blank" rel="nofollow" href="https://forms.gle/dv5x8iQRjg7VvCw19"&gt;fill out this request form&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;We&amp;#8217;re serious about valuing your feedback, and we hope that you will take the opportunity to help shape the developer experience on OpenShift. The annual OpenShift Developer Survey is open until November 22, we&amp;#8217;re now hosting weekly office hours, and we&amp;#8217;re currently scheduling one-to-one feedback sessions. Get in touch and help us make the OpenShift developer experience better for you!&lt;/p&gt; &lt;p&gt;Take the &lt;a target="_blank" rel="nofollow" href="https://redhatvoc.co1.qualtrics.com/jfe/form/SV_cTvjNzMTmsFHILH?blog"&gt;OpenShift Developer Survey&lt;/a&gt; now.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F16%2Flets-collaborate-take-the-2020-red-hat-openshift-developer-survey-now%2F&amp;#38;linkname=Let%E2%80%99s%20collaborate%21%20Take%20the%202020%20Red%20Hat%20OpenShift%20Developer%20Survey%20now" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F16%2Flets-collaborate-take-the-2020-red-hat-openshift-developer-survey-now%2F&amp;#38;linkname=Let%E2%80%99s%20collaborate%21%20Take%20the%202020%20Red%20Hat%20OpenShift%20Developer%20Survey%20now" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F16%2Flets-collaborate-take-the-2020-red-hat-openshift-developer-survey-now%2F&amp;#38;linkname=Let%E2%80%99s%20collaborate%21%20Take%20the%202020%20Red%20Hat%20OpenShift%20Developer%20Survey%20now" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F16%2Flets-collaborate-take-the-2020-red-hat-openshift-developer-survey-now%2F&amp;#38;linkname=Let%E2%80%99s%20collaborate%21%20Take%20the%202020%20Red%20Hat%20OpenShift%20Developer%20Survey%20now" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F16%2Flets-collaborate-take-the-2020-red-hat-openshift-developer-survey-now%2F&amp;#38;linkname=Let%E2%80%99s%20collaborate%21%20Take%20the%202020%20Red%20Hat%20OpenShift%20Developer%20Survey%20now" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F16%2Flets-collaborate-take-the-2020-red-hat-openshift-developer-survey-now%2F&amp;#38;linkname=Let%E2%80%99s%20collaborate%21%20Take%20the%202020%20Red%20Hat%20OpenShift%20Developer%20Survey%20now" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F16%2Flets-collaborate-take-the-2020-red-hat-openshift-developer-survey-now%2F&amp;#38;linkname=Let%E2%80%99s%20collaborate%21%20Take%20the%202020%20Red%20Hat%20OpenShift%20Developer%20Survey%20now" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F16%2Flets-collaborate-take-the-2020-red-hat-openshift-developer-survey-now%2F&amp;#038;title=Let%E2%80%99s%20collaborate%21%20Take%20the%202020%20Red%20Hat%20OpenShift%20Developer%20Survey%20now" data-a2a-url="https://developers.redhat.com/blog/2020/10/16/lets-collaborate-take-the-2020-red-hat-openshift-developer-survey-now/" data-a2a-title="Let’s collaborate! Take the 2020 Red Hat OpenShift Developer Survey now"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/10/16/lets-collaborate-take-the-2020-red-hat-openshift-developer-survey-now/"&gt;Let&amp;#8217;s collaborate! Take the 2020 Red Hat OpenShift Developer Survey now&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/nWz7T8hBLYE" height="1" width="1" alt=""/&gt;</content><summary>We are always looking for ways to understand better how developers create, build, manage, test, and deploy applications on and for Red Hat OpenShift. An important part of that effort is the annual OpenShift Developer Survey, which we’ve just released for 2020. Keep reading to learn more about the survey, including highlights of the 2019 survey results and what to expect from the survey this year. ...</summary><dc:creator>Serena Chechile Nichols</dc:creator><dc:date>2020-10-16T07:00:39Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/10/16/lets-collaborate-take-the-2020-red-hat-openshift-developer-survey-now/</feedburner:origLink></entry><entry><title>Securely connect Quarkus and Red Hat Data Grid on Red Hat OpenShift</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/ng9kxFQ7gjw/" /><category term="Big Data" scheme="searchisko:content:tags" /><category term="Data Grid" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="infinispan" scheme="searchisko:content:tags" /><category term="Java" scheme="searchisko:content:tags" /><category term="Kubernetes" scheme="searchisko:content:tags" /><category term="NoSQL" scheme="searchisko:content:tags" /><category term="openshift" scheme="searchisko:content:tags" /><category term="quarkus" scheme="searchisko:content:tags" /><category term="security" scheme="searchisko:content:tags" /><category term="tls handshake" scheme="searchisko:content:tags" /><author><name>James Falkner</name></author><id>searchisko:content:id:jbossorg_blog-securely_connect_quarkus_and_red_hat_data_grid_on_red_hat_openshift</id><updated>2020-10-15T07:00:56Z</updated><published>2020-10-15T07:00:56Z</published><content type="html">&lt;p&gt;The release of &lt;a href="https://developers.redhat.com/products/datagrid/overview"&gt;Red Hat Data Grid&lt;/a&gt; 8.1 offers new features for securing applications deployed on &lt;a href="https://developers.redhat.com/products/openshift/overview"&gt;Red Hat OpenShift&lt;/a&gt;. Naturally, I wanted to check them out for &lt;a href="https://developers.redhat.com/products/quarkus/getting-started"&gt;Quarkus&lt;/a&gt;. Using the &lt;a target="_blank" rel="nofollow" href="https://quarkus.io/guides/infinispan-client"&gt;Quarkus Data Grid extension&lt;/a&gt; made that easy to do.&lt;/p&gt; &lt;p&gt;Data Grid is an in-memory, distributed, NoSQL datastore solution based on &lt;a target="_blank" rel="nofollow" href="https://infinispan.org"&gt;Infinispan&lt;/a&gt;. Since it manages your data, Data Grid should be as secure as possible. For this reason, it uses a default property realm that requires HTTPS and automatically enforces user authentication on remote endpoints. As an additional layer of security on OpenShift, Data Grid presents certificates signed by the &lt;a target="_blank" rel="nofollow" href="https://docs.openshift.com/container-platform/4.5/security/certificates/service-serving-certificate.html"&gt;OpenShift Service Signer&lt;/a&gt;. In practice, this means that Data Grid is as secure as possible out of the box, requiring encrypted connections and authentication from the first request. Data Grid generates a default set of credentials (which, of course, you can override), but unauthenticated access is denied.&lt;/p&gt; &lt;p&gt;In this article, I show you how to configure a Quarkus application with Data Grid and deploy it on OpenShift.&lt;/p&gt; &lt;p&gt;&lt;span id="more-794727"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;Getting started with Data Grid 8.1&lt;/h2&gt; &lt;p&gt;OpenShift&amp;#8217;s &lt;a href="https://access.redhat.com/documentation/en-us/red_hat_data_grid/8.1/html-single/red_hat_data_grid_8.1_release_notes/index#data_grid_operator"&gt;Data Grid Operator&lt;/a&gt; makes it easy to deploy Data Grid in a variety of configurations. The Operator also manages Data Grid&amp;#8217;s security, storage, upgrade, and logging capabilities. Once you&amp;#8217;ve deployed the Data Grid Operator from the OpenShift &lt;a target="_blank" rel="nofollow" href="https://docs.openshift.com/container-platform/4.5/operators/understanding/olm-understanding-operatorhub.html"&gt;OperatorHub&lt;/a&gt;, it &lt;a target="_blank" rel="nofollow" href="https://access.redhat.com/documentation/en-us/red_hat_data_grid/8.1/html-single/running_data_grid_on_openshift/index#start_operator"&gt;exposes custom resources&lt;/a&gt; (called Infinispan Cluster and Infinispan Cache), which Data Grid uses to provision the caches on an existing cluster.&lt;/p&gt; &lt;p&gt;In the next sections, we&amp;#8217;ll deploy a three-node Data Grid cluster, configure a sample Quarkus application to securely connect to Data Grid, then deploy and verify our application on OpenShift.&lt;/p&gt; &lt;h2&gt;Deploy a three-node Data Grid cluster&lt;/h2&gt; &lt;p&gt;To deploy a three-node Data Grid cluster, just add the following custom resource to any OpenShift project (note that my project name for this example is &lt;code&gt;dgdemo&lt;/code&gt;):&lt;/p&gt; &lt;pre&gt;apiVersion: infinispan.org/v1 kind: Infinispan metadata: name: example-infinispan namespace: dgdemo spec: replicas: 3 expose: type: LoadBalancer &lt;/pre&gt; &lt;p&gt;After you&amp;#8217;ve added the custom resource, Data Grid deploys the nodes and sets up the networking. The setup includes a &lt;a href="https://developers.redhat.com/topics/kubernetes"&gt;Kubernetes&lt;/a&gt; service that resolves to the cluster members. The Kubernetes service support HTTPS using the OpenShift Service Signer.&lt;/p&gt; &lt;h3&gt;Using signed certificates to connect Data Grid and Quarkus&lt;/h3&gt; &lt;p&gt;When your applications access Data Grid, they&amp;#8217;ll do so through the Kubernetes service, so they will be subject to its certificates. It&amp;#8217;s possible to use an annotated &lt;code&gt;ConfigMap&lt;/code&gt; to simplify the process of injecting these certificates into a pod. However, because we&amp;#8217;re using Java, we&amp;#8217;ll need the certificates in a format that Java applications can consume, so JKS or PKCS12.&lt;/p&gt; &lt;p&gt;We&amp;#8217;ll use the signed certificates when our Quarkus application initiates a TLS handshake with Data Grid. We need to manually extract and convert them to JKS format before mounting them in our application&amp;#8217;s running pods.&lt;/p&gt; &lt;h3&gt;Extract the certificates&lt;/h3&gt; &lt;p&gt;To generate the Java keystore, we first need to extract the certificates from the OpenShift Service Signer&amp;#8217;s certificate authority. We can then use the JDK&amp;#8217;s &lt;code&gt;keytool&lt;/code&gt; to generate the keystore file. Using the &lt;code&gt;oc&lt;/code&gt;, &lt;code&gt;openssl&lt;/code&gt;, and &lt;code&gt;keytool&lt;/code&gt; command-line interfaces (CLIs), enter the following:&lt;/p&gt; &lt;pre&gt;$ oc get secrets/signing-key -n openshift-service-ca -o template='{{index .data "tls.crt"}}' | openssl base64 -d -A &amp;#62; /tmp/server.crt $ keytool -importcert -keystore /tmp/server.jks -storepass password -file /tmp/server.crt -trustcacerts -noprompt &lt;/pre&gt; &lt;p&gt;This series of commands grabs the Base64-encoded certificate content, then uses the &lt;code&gt;keytool&lt;/code&gt; format to a file &lt;code&gt;/tmp/server.jks&lt;/code&gt; with the passphrase: &lt;code&gt;password&lt;/code&gt;.&lt;/p&gt; &lt;h3&gt;Create a secret&lt;/h3&gt; &lt;p&gt;Next, we need to consume the certificates in our Quarkus application namespace (&lt;code&gt;dgdemo&lt;/code&gt;). We&amp;#8217;ll create a secret, &lt;code&gt;clientcerts&lt;/code&gt;, whose contents are set to the contents of our certificate file. Here&amp;#8217;s the command to do it:&lt;/p&gt; &lt;pre&gt;$ oc create secret generic clientcerts -n dgdemo --from-file=clientcerts=/tmp/server.jks &lt;/pre&gt; &lt;h2&gt;Configure the Quarkus application&lt;/h2&gt; &lt;p&gt;We&amp;#8217;ve created our secret named &lt;code&gt;clientcerts&lt;/code&gt; and set its value as the content of our &lt;code&gt;server.jks&lt;/code&gt;. Next, we need to configure our Quarkus application to mount the secret at a given mount point, read the contents, and use the certificates whenever it connects to Data Grid.&lt;/p&gt; &lt;p&gt;I created a &lt;a target="_blank" rel="nofollow" href="https://github.com/jamesfalkner/quarkus-dg-tls"&gt;sample application&lt;/a&gt; for this part of the demonstration. Open it, and you&amp;#8217;ll see that I&amp;#8217;ve already installed both the &lt;code&gt;infinispan-client&lt;/code&gt; and &lt;code&gt;openshift&lt;/code&gt; extensions. This is a simple application that responds to the &lt;code&gt;GET /infinispan&lt;/code&gt; endpoint with the value of the Data Grid entry under the key of &lt;code&gt;hello&lt;/code&gt;. As you might guess, the entry is &amp;#8220;Hello World, Infinispan is up!&amp;#8221;&lt;/p&gt; &lt;p&gt;You can find the configuration in &lt;code&gt;src/main/resources/application.properties&lt;/code&gt;. I&amp;#8217;ll also show it here:&lt;/p&gt; &lt;pre&gt;# The DNS name and port of the Service fronting Data Grid quarkus.infinispan-client.server-list=example-infinispan:11222 # Auth info, including server name and super secret password for the developer quarkus.infinispan-client.auth-server-name=example-infinispan quarkus.infinispan-client.auth-realm=default # DG user credentials. You'll need to change these quarkus.infinispan-client.auth-username=developer quarkus.infinispan-client.auth-password=I@TIR7awMPvYATGl quarkus.infinispan-client.sasl-mechanism=PLAIN quarkus.infinispan-client.client-intelligence=BASIC # Where the application can read the trust store from when it runs quarkus.infinispan-client.trust-store=/mnt/clientcerts # trust store password quarkus.infinispan-client.trust-store-password=password # trust store type quarkus.infinispan-client.trust-store-type=jks # which secret to mount and where to mount it quarkus.openshift.mounts.my-volume.path=/mnt quarkus.openshift.secret-volumes.my-volume.secret-name=clientcerts # instructs quarkus to build and deploy to kubernetes/openshift, and # create an ingress Route, and to trust the Kubernetes API since we're using self-signed, quarkus.container-image.build=true quarkus.kubernetes.deploy=true quarkus.openshift.expose=true quarkus.kubernetes-client.trust-certs=true quarkus.kubernetes.deployment-target=openshift &lt;/pre&gt; &lt;h3&gt;Get the secret&lt;/h3&gt; &lt;p&gt;Our application will use the values of &lt;code&gt;quarkus.infinispan-client.auth-username&lt;/code&gt; and &lt;code&gt;quarkus.infinispan-client.auth-password&lt;/code&gt; as the credentials to talk to Data Grid. Enter the following command to discover the autogenerated username of &lt;code&gt;developer&lt;/code&gt; and its associated password:&lt;/p&gt; &lt;pre&gt;$ oc get secret/example-infinispan-generated-secret -o template='{{index .data "identities.yaml"}}' | openssl base64 -d -A &lt;/pre&gt; &lt;p&gt;Take the username and password and insert them into your the&lt;code&gt;application.propeties&lt;/code&gt; file.&lt;/p&gt; &lt;p&gt;With all of that in place, we&amp;#8217;re ready to deploy!&lt;/p&gt; &lt;h2&gt;Deploy to OpenShift&lt;/h2&gt; &lt;p&gt;All we have to do now is log into OpenShift and switch to our demo project, then build and deploy. In this case, the &lt;a target="_blank" rel="nofollow" href="https://quarkus.io/guides/deploying-to-openshift"&gt;Quarkus OpenShift plugin&lt;/a&gt; does most of the work for us; we just enter:&lt;/p&gt; &lt;pre&gt;$ oc project dgdemo $ mvn clean package &lt;/pre&gt; &lt;p&gt;It will take a minute or so to build and deploy. After the build is done, the application should deploy and show up in the OpenShift developer console, as shown in Figure 1.&lt;/p&gt; &lt;div id="attachment_794927" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/10/Screen-Shot-2020-10-01-at-6.58.39-PM.png"&gt;&lt;img aria-describedby="caption-attachment-794927" class="wp-image-794927 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/10/Screen-Shot-2020-10-01-at-6.58.39-PM-1024x512.png" alt="The OpenShift developer console shows the Quarkus application and its build status." width="640" height="320" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/10/Screen-Shot-2020-10-01-at-6.58.39-PM-1024x512.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/10/Screen-Shot-2020-10-01-at-6.58.39-PM-300x150.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/10/Screen-Shot-2020-10-01-at-6.58.39-PM-768x384.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-794927" class="wp-caption-text"&gt;Figure 1: The Quarkus application with Data Grid in the OpenShift developer console.&lt;/p&gt;&lt;/div&gt; &lt;h3&gt;Test the application&lt;/h3&gt; &lt;p&gt;Before we test the application, let&amp;#8217;s take a look at its log file:&lt;/p&gt; &lt;pre&gt;$ oc logs -n dgdemo dc/infinispan-client-quickstart __ ____ __ _____ ___ __ ____ ______ --/ __ \/ / / / _ | / _ \/ //_/ / / / __/ -/ /_/ / /_/ / __ |/ , _/ ,&amp;#60; / /_/ /\ \ --\___\_\____/_/ |_/_/|_/_/|_|\____/___/ 2020-10-01 22:53:32,096 INFO [org.inf.SECURITY] (HotRod-client-async-pool-1-1) ISPN000947: Using Java SSL Provider 2020-10-01 22:53:37,612 INFO [org.inf.HOTROD] (main) ISPN004021: Infinispan version: Infinispan 'Corona Extra' 11.0.3.Final 2020-10-01 22:53:37,863 INFO [InfinispanClientApp] (main) Create or get cache named mycache with the default configuration 2020-10-01 22:53:37,909 INFO [io.quarkus] (main) infinispan-client-quickstart 1.0-SNAPSHOT on JVM (powered by Quarkus 1.8.0.Final) started in 1.676s. Listening on: http://0.0.0.0:8080 2020-10-01 22:53:37,909 INFO [io.quarkus] (main) Profile prod activated. 2020-10-01 22:53:37,909 INFO [io.quarkus] (main) Installed features: [cdi, infinispan-client, kubernetes, resteasy] &lt;/pre&gt; &lt;p&gt;That looks healthy. Now, let&amp;#8217;s test it with &lt;code&gt;curl&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;$ curl http://$(oc get route -n dgdemo infinispan-client-quickstart -o jsonpath="{.spec.host}")/infinispan Hello World, Infinispan is up! &lt;/pre&gt; &lt;p&gt;Yes, we got the expected value showing that the connection was successful.&lt;/p&gt; &lt;h3&gt;Verify the value in the Data Grid 8.1 web console&lt;/h3&gt; &lt;p&gt;As our final step, let&amp;#8217;s use the new &lt;a target="_blank" rel="nofollow" href="https://access.redhat.com/webassets/avalon/d/red-hat-data-grid/8.1/videos/console_tour.html"&gt;Data Grid 8.1 web console&lt;/a&gt; to verify the value. To get to it, you can discover the URL with:&lt;/p&gt; &lt;pre&gt;$ echo http://$(oc get service/example-infinispan-external jsonpath='{.status.loadBalancer.ingress[0].hostname}'):11222 &lt;/pre&gt; &lt;p&gt;This command outputs the URL, which you can then copy and paste into your browser. You can use the credentials that you specified earlier to log in. Then, find the &lt;b&gt;mycache&lt;/b&gt; cache, and search for entries using the key &lt;b&gt;hello&lt;/b&gt;, as shown in Figure 2.&lt;/p&gt; &lt;div id="attachment_794937" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/10/Screen-Shot-2020-10-01-at-7.22.40-PM.png"&gt;&lt;img aria-describedby="caption-attachment-794937" class="wp-image-794937 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/10/Screen-Shot-2020-10-01-at-7.22.40-PM-1024x546.png" alt="The Data Grid web console shows the The application's key and value." width="640" height="341" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/10/Screen-Shot-2020-10-01-at-7.22.40-PM-1024x546.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/10/Screen-Shot-2020-10-01-at-7.22.40-PM-300x160.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/10/Screen-Shot-2020-10-01-at-7.22.40-PM-768x410.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-794937" class="wp-caption-text"&gt;Figure 2: The application&amp;#8217;s key and value in the new Data Grid web console.&lt;/p&gt;&lt;/div&gt; &lt;h2&gt;Wrap up&lt;/h2&gt; &lt;p&gt;Red Hat Data Grid delivers many features for hybrid cloud deployments on OpenShift. In this article, you&amp;#8217;ve seen how to use a default configuration to securely connect your Quarkus applications to Data Grid and deploy them on OpenShift.&lt;/p&gt; &lt;p&gt;While the default configuration is considered to be as secure as possible, there are many other features to explore. Examples include cross-data center asynchronous replication on OpenShift and autoscaling to dynamically expand and contract clusters sizes.&lt;/p&gt; &lt;p&gt;Whether you choose the default configuration or need to explore additional security features, &lt;a target="_blank" rel="nofollow" href="https://www.redhat.com/en/technologies/jboss-middleware/data-grid"&gt;Red Hat Data Grid&lt;/a&gt; is a valuable solution for large datasets across large clouds.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F15%2Fsecurely-connect-quarkus-and-red-hat-data-grid-on-red-hat-openshift%2F&amp;#38;linkname=Securely%20connect%20Quarkus%20and%20Red%20Hat%20Data%20Grid%20on%20Red%20Hat%20OpenShift" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F15%2Fsecurely-connect-quarkus-and-red-hat-data-grid-on-red-hat-openshift%2F&amp;#38;linkname=Securely%20connect%20Quarkus%20and%20Red%20Hat%20Data%20Grid%20on%20Red%20Hat%20OpenShift" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F15%2Fsecurely-connect-quarkus-and-red-hat-data-grid-on-red-hat-openshift%2F&amp;#38;linkname=Securely%20connect%20Quarkus%20and%20Red%20Hat%20Data%20Grid%20on%20Red%20Hat%20OpenShift" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F15%2Fsecurely-connect-quarkus-and-red-hat-data-grid-on-red-hat-openshift%2F&amp;#38;linkname=Securely%20connect%20Quarkus%20and%20Red%20Hat%20Data%20Grid%20on%20Red%20Hat%20OpenShift" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F15%2Fsecurely-connect-quarkus-and-red-hat-data-grid-on-red-hat-openshift%2F&amp;#38;linkname=Securely%20connect%20Quarkus%20and%20Red%20Hat%20Data%20Grid%20on%20Red%20Hat%20OpenShift" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F15%2Fsecurely-connect-quarkus-and-red-hat-data-grid-on-red-hat-openshift%2F&amp;#38;linkname=Securely%20connect%20Quarkus%20and%20Red%20Hat%20Data%20Grid%20on%20Red%20Hat%20OpenShift" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F15%2Fsecurely-connect-quarkus-and-red-hat-data-grid-on-red-hat-openshift%2F&amp;#38;linkname=Securely%20connect%20Quarkus%20and%20Red%20Hat%20Data%20Grid%20on%20Red%20Hat%20OpenShift" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F15%2Fsecurely-connect-quarkus-and-red-hat-data-grid-on-red-hat-openshift%2F&amp;#038;title=Securely%20connect%20Quarkus%20and%20Red%20Hat%20Data%20Grid%20on%20Red%20Hat%20OpenShift" data-a2a-url="https://developers.redhat.com/blog/2020/10/15/securely-connect-quarkus-and-red-hat-data-grid-on-red-hat-openshift/" data-a2a-title="Securely connect Quarkus and Red Hat Data Grid on Red Hat OpenShift"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/10/15/securely-connect-quarkus-and-red-hat-data-grid-on-red-hat-openshift/"&gt;Securely connect Quarkus and Red Hat Data Grid on Red Hat OpenShift&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/ng9kxFQ7gjw" height="1" width="1" alt=""/&gt;</content><summary>The release of Red Hat Data Grid 8.1 offers new features for securing applications deployed on Red Hat OpenShift. Naturally, I wanted to check them out for Quarkus. Using the Quarkus Data Grid extension made that easy to do. Data Grid is an in-memory, distributed, NoSQL datastore solution based on Infinispan. Since it manages your data, Data Grid should be as secure as possible. For this reason, i...</summary><dc:creator>James Falkner</dc:creator><dc:date>2020-10-15T07:00:56Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/10/15/securely-connect-quarkus-and-red-hat-data-grid-on-red-hat-openshift/</feedburner:origLink></entry><entry><title>Checkpointing Java from outside of Java</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/7MgdW6vM-2s/" /><category term="Developer Tools" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="heap dump" scheme="searchisko:content:tags" /><category term="Java" scheme="searchisko:content:tags" /><category term="Java checkpoint" scheme="searchisko:content:tags" /><category term="JIT compiler" scheme="searchisko:content:tags" /><category term="linux" scheme="searchisko:content:tags" /><category term="load java class" scheme="searchisko:content:tags" /><category term="open source" scheme="searchisko:content:tags" /><category term="OpenJDK" scheme="searchisko:content:tags" /><author><name>chf@redhat.com</name></author><id>searchisko:content:id:jbossorg_blog-checkpointing_java_from_outside_of_java</id><updated>2020-10-15T07:00:12Z</updated><published>2020-10-15T07:00:12Z</published><content type="html">&lt;p&gt;When &lt;a href="https://developers.redhat.com/products/openjdk/overview"&gt;OpenJDK&lt;/a&gt;&amp;#8216;s Java virtual machine (JVM) runs a &lt;a href="https://developers.redhat.com/topics/enterprise-java"&gt;Java&lt;/a&gt; application, it loads a dozen or so classes before it starts the main class. It runs a method several hundred times before it invokes the optimizing compiler on that method. This preparation is a critical component of Java&amp;#8217;s &amp;#8220;write once, run anywhere&amp;#8221; power, but it comes at the cost of long startup times.&lt;/p&gt; &lt;p&gt;We&amp;#8217;ve been working on a new approach that allows you to load your classes, warm up your just-in-time (JIT) compiler, and then checkpoint your application. Later, you can restore the application to get it running quickly. With these changes, we have seen applications that took seconds to start come up warm in milliseconds.&lt;/p&gt; &lt;p&gt;In this article, you&amp;#8217;ll learn how to checkpoint and restore a running Java program from the &lt;a href="https://developers.redhat.com/topics/linux"&gt;Linux command line&lt;/a&gt;. In another article soon, I will introduce a Java Native Interface (JNI) library that lets you checkpoint and restore a Java program from inside of your Java code.&lt;/p&gt; &lt;h2&gt;Using checkpoints in your Java code&lt;/h2&gt; &lt;p&gt;The JNI &lt;a target="_blank" rel="nofollow" href="https://www.jfokus.se/jfokus19-preso/Checkpointing-Java.pdf"&gt;Checkpoint Restore library&lt;/a&gt; is based on &lt;a target="_blank" rel="nofollow" href="http://www.criu.org"&gt;Linux Checkpoint/Restore in Userspace&lt;/a&gt; (CRIU), which we&amp;#8217;ll use for the examples in this article.  CRIU can save you startup time, but it offers even more possibilities.&lt;/p&gt; &lt;p&gt;If you have a program that runs for a long time, you can regularly checkpoint it. Then, if you get a failure, you can restart the application from the last checkpoint. If the failure is due to a bug, then you can quickly reproduce it. If the failure was caused by an external factor, you could continue from where you left off without losing any work.&lt;/p&gt; &lt;p&gt;As another example, say that you want to take a heap dump at several points in the program, but stopping to walk the heap perturbs the execution. Inserting checkpoints lets you run the program to completion and then go back and restart to do a heap dump. That way, you can see the memory layout at the point in time that interests you, but with an order of program execution that is very similar to the original program.&lt;/p&gt; &lt;p&gt;Does that sound good? Let&amp;#8217;s go through an example.&lt;/p&gt; &lt;h2&gt;Checkpointing from outside of Java&lt;/h2&gt; &lt;p&gt;In this example, you&amp;#8217;ll learn how to checkpoint and restore a running Java program from the command line. To start,  let&amp;#8217;s say that we are running a Java program called Scooby.&lt;/p&gt; &lt;p&gt;From terminal one, enter:&lt;/p&gt; &lt;pre&gt;% setsid java -XX:-UsePerfData -XX:+UseSerialGC Scooby &lt;/pre&gt; &lt;p&gt;From another directory in another terminal, enter:&lt;/p&gt; &lt;pre&gt;% sudo criu dump -t --shell-job -o dump.log &lt;/pre&gt; &lt;p&gt;You can now do a &lt;code&gt;ps&lt;/code&gt; and see that your Java program is no longer running. You can look at the directory and view a number of image files. You can also look at the &lt;code&gt;dump.log&lt;/code&gt; to see everything that CRIU did to checkpoint your code.&lt;/p&gt; &lt;p&gt;Now, from the directory where you dumped the image, do the following:&lt;/p&gt; &lt;pre&gt;% sudo criu restore --shell-job -d -vvv -o restore.log &lt;/pre&gt; &lt;p&gt;You should see your Java program running again. You can check the &lt;code&gt;restore.log&lt;/code&gt; to see what restoring did. You will notice that, by default, CRIU restores the JVM to the same process ID (PID). If you want to restore the same image multiple times, you can use virtual PIDs:&lt;/p&gt; &lt;pre&gt;% sudo unshare -p -m -f bash # mount -t proc none /proc/ # criu restore --shell-job &lt;/pre&gt; &lt;p&gt;In another window but the same directory, you could do:&lt;/p&gt; &lt;pre&gt;% sudo unshare -p -m -f bash # mount -t proc none /proc/ # criu restore --shell-job &lt;/pre&gt; &lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;Checkpointing has a few issues. For now, you need to turn off &lt;code&gt;perf&lt;/code&gt; and parallel garbage collection when using checkpoints. If you have a &lt;code&gt;/var/lib/sss/pipes/nss&lt;/code&gt; file, you will have to remove it. You will also need root access to run a &lt;code&gt;restore&lt;/code&gt; operation because you need to be able to choose a specific PID. The CRIU team is currently working on this issue.&lt;/p&gt; &lt;p&gt;Stay tuned for my next article, where I&amp;#8217;ll show you how to use the JNI Checkpoint Restore library to checkpoint Java from inside of Java.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F15%2Fcheckpointing-java-from-outside-of-java%2F&amp;#38;linkname=Checkpointing%20Java%20from%20outside%20of%20Java" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F15%2Fcheckpointing-java-from-outside-of-java%2F&amp;#38;linkname=Checkpointing%20Java%20from%20outside%20of%20Java" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F15%2Fcheckpointing-java-from-outside-of-java%2F&amp;#38;linkname=Checkpointing%20Java%20from%20outside%20of%20Java" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F15%2Fcheckpointing-java-from-outside-of-java%2F&amp;#38;linkname=Checkpointing%20Java%20from%20outside%20of%20Java" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F15%2Fcheckpointing-java-from-outside-of-java%2F&amp;#38;linkname=Checkpointing%20Java%20from%20outside%20of%20Java" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F15%2Fcheckpointing-java-from-outside-of-java%2F&amp;#38;linkname=Checkpointing%20Java%20from%20outside%20of%20Java" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F15%2Fcheckpointing-java-from-outside-of-java%2F&amp;#38;linkname=Checkpointing%20Java%20from%20outside%20of%20Java" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F10%2F15%2Fcheckpointing-java-from-outside-of-java%2F&amp;#038;title=Checkpointing%20Java%20from%20outside%20of%20Java" data-a2a-url="https://developers.redhat.com/blog/2020/10/15/checkpointing-java-from-outside-of-java/" data-a2a-title="Checkpointing Java from outside of Java"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/10/15/checkpointing-java-from-outside-of-java/"&gt;Checkpointing Java from outside of Java&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/7MgdW6vM-2s" height="1" width="1" alt=""/&gt;</content><summary>When OpenJDK‘s Java virtual machine (JVM) runs a Java application, it loads a dozen or so classes before it starts the main class. It runs a method several hundred times before it invokes the optimizing compiler on that method. This preparation is a critical component of Java’s “write once, run anywhere” power, but it comes at the cost of long startup times. We’ve been working on a new approach th...</summary><dc:creator>chf@redhat.com</dc:creator><dc:date>2020-10-15T07:00:12Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/10/15/checkpointing-java-from-outside-of-java/</feedburner:origLink></entry><entry><title>Payments Architecture - Financial Calculations Example</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/ApmBADhkix8/payments-architecture-financial-calculations-example.html" /><category term="Architecture Blueprints" scheme="searchisko:content:tags" /><category term="Automate" scheme="searchisko:content:tags" /><category term="Decision Manager" scheme="searchisko:content:tags" /><category term="feed_group_name_global" scheme="searchisko:content:tags" /><category term="feed_name_ericschabell" scheme="searchisko:content:tags" /><category term="FUSE" scheme="searchisko:content:tags" /><category term="JBoss" scheme="searchisko:content:tags" /><category term="JBossAMQ" scheme="searchisko:content:tags" /><category term="openshift" scheme="searchisko:content:tags" /><category term="Process Automation Manager" scheme="searchisko:content:tags" /><author><name>Eric D. Schabell</name></author><id>searchisko:content:id:jbossorg_blog-payments_architecture_financial_calculations_example</id><updated>2020-10-15T11:48:54Z</updated><published>2020-10-15T05:00:00Z</published><content type="html">&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;table cellpadding="0" cellspacing="0" class="tr-caption-container" style="float: left; margin-right: 1em;"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style="text-align: center;"&gt;&lt;a href="https://1.bp.blogspot.com/-NhImz2b--gU/X1jsrXrG_jI/AAAAAAAAxeI/2I4wj4AD4YUcuxWk1-464UVs5OiejZFwQCNcBGAsYHQ/s1600/christiann-koepke-0jPuWm8_9wY-unsplash.jpg" style="clear: left; margin-bottom: 1em; margin-left: auto; margin-right: auto;"&gt;&lt;img alt="financial calculations" border="0" data-original-height="1067" data-original-width="1600" height="213" src="https://1.bp.blogspot.com/-NhImz2b--gU/X1jsrXrG_jI/AAAAAAAAxeI/2I4wj4AD4YUcuxWk1-464UVs5OiejZFwQCNcBGAsYHQ/s320/christiann-koepke-0jPuWm8_9wY-unsplash.jpg" title="" width="320" /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="tr-caption" style="font-size: 12.8px; text-align: center;"&gt;Part 6 - Financial calculations&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;Cloud technology is changing the way payment services are architectured. In this series we will be presenting insight from our customers on adopting open source and cloud technology to modernize their payment service.&lt;br /&gt;&lt;br /&gt;So far we've presented research-based architectural blueprints of&amp;nbsp;&lt;a href="http://www.schabell.org/2018/11/integration-key-to-customer-experience-introduction.html" target="_blank"&gt;omnichannel customer experience&lt;/a&gt;,&amp;nbsp;&lt;a href="https://www.schabell.org/2020/01/integrating-saas-applications-an-introduction.html" target="_blank"&gt;integrating with SaaS applications&lt;/a&gt;, and&amp;nbsp;&lt;a href="https://www.schabell.org/2020/05/cloud-native-development-a-blueprint.html" target="_blank"&gt;cloud-native development solutions&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;In&amp;nbsp;&lt;a href="https://www.schabell.org/2020/09/payments-architecture-immediate-payments-example.html" target="_blank"&gt;the previous article&lt;/a&gt;&amp;nbsp;in this series we covered our fraud detection physical architecture.&lt;br /&gt;&lt;br /&gt;In this article we're exploring the final physical architecture in this blueprint,&amp;nbsp; a generic financial calculations example, one based on successful customer solutions.&lt;br /&gt;&lt;a name='more'&gt;&lt;/a&gt;&lt;br /&gt;&lt;h3 style="text-align: left;"&gt;Blueprints&lt;/h3&gt;&lt;div&gt;As a reminder, the architectural details covered here are base on real customer integration solutions using open source technologies.&lt;br /&gt;&lt;br /&gt;The example scenario presented here is a generic common blueprint that was uncovered researching customer solutions. It's our intent to provide a blueprint that provides guidance and not deep technical details.&lt;br /&gt;&lt;br /&gt;This section covers the visual representations as presented. There are many ways to represent each element in this architectural blueprint, but we've chosen icons, text and colors that I hope are going to make it all easy to absorb. Feel free to post comments at the bottom of this post, or&amp;nbsp;&lt;a href="https://www.schabell.org/p/contact.html" target="_blank"&gt;contact us&lt;/a&gt;&amp;nbsp;directly with your feedback.&lt;br /&gt;&lt;br /&gt;Now let's take a look at the details in this blueprint and outline the example.&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;h3 style="text-align: left;"&gt;Generic payment calculations&lt;/h3&gt;&lt;/div&gt;&lt;div&gt;The example blueprint shown on the right entitled&amp;nbsp;&lt;i&gt;Financial calculations example&lt;/i&gt;&amp;nbsp;outlines the solution in a physical architecture. Note that this diagram is focusing on the highest level of the solution and the element groupings that apply to this process.&lt;br /&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://1.bp.blogspot.com/-Ee9CWw-QOWI/X23aIbUmvpI/AAAAAAAAxkU/1Np_R6YGBIoc_VQzKQcJiLXcndV1X5vhACNcBGAsYHQ/s1600/payments-calculations-sd.png" style="clear: right; float: right; margin-bottom: 1em; margin-left: 1em;"&gt;&lt;img alt="financial calculations" border="0" data-original-height="902" data-original-width="1600" height="180" src="https://1.bp.blogspot.com/-Ee9CWw-QOWI/X23aIbUmvpI/AAAAAAAAxkU/1Np_R6YGBIoc_VQzKQcJiLXcndV1X5vhACNcBGAsYHQ/s320/payments-calculations-sd.png" title="" width="320" /&gt;&lt;/a&gt;&lt;/div&gt;All previously discussed physical architectures were related to the original &lt;a href="https://www.schabell.org/2020/09/payments-architecture-immediate-payments-example.html" target="_blank"&gt;immediate payments architecture overview&lt;/a&gt;, but this one is a more generic payments case. It's possible to imagine this financial calculations architecture applying to many domains where determining discounts, taxes, fees, and special offers might be part of the payment process.&lt;br /&gt;&lt;br /&gt;In this example, starting from the top left corner, a payment request always arrives from a fronting &lt;i&gt;API &lt;/i&gt;element. as an entry point. The payment request starts off as a message and this is a more traditional integration architecture than one using message streams that we've been discussing previously.&lt;br /&gt;&lt;br /&gt;The initial request arrives in the &lt;i&gt;message queues&lt;/i&gt;&amp;nbsp;where it's picked up and validated through the &lt;i&gt;validation microservices. &lt;/i&gt;The validation requires the use of data and it shown receiving input from a&amp;nbsp;&lt;i&gt;reference data &lt;/i&gt;element that fronts all of the backing data stores.&lt;br /&gt;&lt;br /&gt;Depending on the solution domain, these data stores can be anything from customer data, taxation information, compliance data, or other needed data sources. For this example the data stores backing payment calculations are &lt;i&gt;customer, contact, tariff, &lt;/i&gt;and&lt;i&gt;&amp;nbsp;discount &lt;/i&gt;information.&amp;nbsp;&lt;i&gt;&amp;nbsp;&lt;/i&gt;&lt;br /&gt;&lt;br /&gt;After validation a message is sent back to the &lt;i&gt;message queues&lt;/i&gt;.&lt;br /&gt;&lt;br /&gt;A generic &lt;i&gt;detail calculations microservices &lt;/i&gt;element encompasses the various stages that calculations might need to be performed on the payment request. For example, it can arrive here more than once as the payment calculations are made to apply tariffs and then discounts.&lt;br /&gt;&lt;br /&gt;As the payment calculation is pulled together, there will be times when data or message aggregation is needed to modify for a specific calculation or backend system access. For this purpose you find the &lt;i&gt;aggregation microservices&amp;nbsp;&lt;/i&gt;which, upon final completion of all calculations and aggregations, &amp;nbsp;passes the payment request on to the &lt;i&gt;integration microservices.&lt;/i&gt;&lt;br /&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;These &lt;i&gt;integration microservices &lt;/i&gt;ensure that the &lt;i&gt;billing systems &lt;/i&gt;are accessible for the final processed payment request. It's shown here as a possible private cloud element as that's ensuring that integration will be effective even if the &lt;i&gt;billing systems&lt;/i&gt;&amp;nbsp;change over time or move to other architectures outside the organizations control.&lt;br /&gt;&lt;br /&gt;This completes the tour of this financial calculations architecture.&lt;/div&gt;&lt;h3&gt;Project examples&lt;/h3&gt;&lt;div&gt;Sharing the process results for our payments blueprint is what this series is about, but there are project artifacts and diagrams that can also be shared with you the reader. We've pulled together an&amp;nbsp;&lt;a href="https://gitlab.com/redhatdemocentral/portfolio-architecture-examples" target="_blank"&gt;examples repository&lt;/a&gt;&amp;nbsp;for all our architecture blueprint diagrams.&amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;div style="text-align: right;"&gt;&lt;/div&gt;The&amp;nbsp;&lt;a href="https://gitlab.com/redhatdemocentral/portfolio-architecture-examples" target="_blank"&gt;Portfolio Architecture Examples&lt;/a&gt;&amp;nbsp;repository makes it possible to collect and share individual images from each diagram element as well as the entire project as a whole.&lt;/div&gt;&lt;div&gt;&lt;div style="text-align: right;"&gt;&lt;a href="https://1.bp.blogspot.com/-4t4sRfvBdlA/X2CrzVQ9sFI/AAAAAAAAxgY/vZ61Z75fKhk3GFBC3ZZlOyGpIJWtBgDngCNcBGAsYHQ/s1600/Screenshot%2B2020-09-15%2Bat%2B13.55.42.png" style="clear: right; float: right; margin-bottom: 1em; margin-left: 1em;"&gt;&lt;img alt="financial calculations" border="1" data-original-height="232" data-original-width="530" height="139" src="https://1.bp.blogspot.com/-4t4sRfvBdlA/X2CrzVQ9sFI/AAAAAAAAxgY/vZ61Z75fKhk3GFBC3ZZlOyGpIJWtBgDngCNcBGAsYHQ/s320/Screenshot%2B2020-09-15%2Bat%2B13.55.42.png" title="" width="320" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;For example, if you scroll down to the file listings on the main page, you can locate all the example physical diagrams as shown on the right.&lt;br /&gt;&lt;div style="text-align: right;"&gt;&lt;/div&gt;&lt;br /&gt;This is the collection associated with payments:&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;in this case there are multiple images you can click to view&lt;/li&gt;&lt;li&gt;a project file you can download to your local machine using the&amp;nbsp;&lt;i&gt;Download Diagram&lt;/i&gt;&amp;nbsp;link&lt;/li&gt;&lt;li&gt;a&amp;nbsp;&lt;i&gt;Load Diagram&lt;/i&gt;&amp;nbsp;link that you can&amp;nbsp;&lt;a href="https://redhatdemocentral.gitlab.io/portfolio-architecture-tooling/index.html?#/portfolio-architecture-examples/projects/schematic-diagrams-payments.drawio" target="_blank"&gt;click to automatically open the project diagrams&lt;/a&gt;&amp;nbsp;in the diagram tooling used in this blueprint (use private or incognito browser mode to avoid caching issues and a smoother tooling experience)&amp;nbsp;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div&gt;Give it a try and feel free to explore the collection of logical, schematic, detailed, solution, and community diagrams. This should allow you to get started much quicker than from scratch if you can kick-start a project with existing diagrams.&lt;br /&gt;&lt;br /&gt;Should you desire to start designing your own diagrams, please contribute the project file (ending in .drawio) by raising an issue with the file attached. We'd love to continue collecting these projects for others to use.&lt;br /&gt;&lt;br /&gt;Finally, there is a free online&amp;nbsp;&lt;a href="https://redhatdemocentral.gitlab.io/portfolio-architecture-workshops" target="_blank"&gt;beginners guide workshop&lt;/a&gt;&amp;nbsp;available focused on using the diagram tooling, please explore to learn tips and tricks from the experts.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3&gt;What's next&lt;/h3&gt;&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;An overview of the series on the payments portfolio architecture blueprint can be found here:&lt;br /&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;&lt;a href="https://www.schabell.org/2020/09/financial-payments-architecture-an-introduction.html" target="_blank"&gt;An introduction&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://www.schabell.org/2020/09/payments-architecture-common-elements.html" target="_blank"&gt;Common architecture elements&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://www.schabell.org/2020/09/payments-architecture-immediate-payments-example.html" target="_blank"&gt;Immediate payments example&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://www.schabell.org/2020/10/payments-architecture-anti-money-laundering-example.html" target="_blank"&gt;Anti-money laundering example&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://www.schabell.org/2020/10/payments-architecture-fraud-detection-example.html" target="_blank"&gt;Fraud detection example&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://www.schabell.org/2020/10/payments-architecture-financial-calculations-example.html" target="_blank"&gt;Financial calculations example&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;ol style="text-align: left;"&gt;&lt;/ol&gt;Catch up on any articles you missed by following one of the links above.&lt;br /&gt;&lt;br /&gt;This completes our series that has laid out a cloud-native architecture focusing on payment processing with suggestions for leveraging open technologies.&lt;br /&gt;&lt;br /&gt;(Article co-authored by&amp;nbsp;&lt;a href="https://www.linkedin.com/in/ramonv/?originalSubdomain=uk" target="_blank"&gt;Ramon Villarreal&lt;/a&gt;)&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="feedflare"&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=MPdQQlYOz_Q:ZWxoElr_AmA:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=yIl2AUoC8zA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=MPdQQlYOz_Q:ZWxoElr_AmA:63t7Ie-LG7Y"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=63t7Ie-LG7Y" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=MPdQQlYOz_Q:ZWxoElr_AmA:4cEx4HpKnUU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=MPdQQlYOz_Q:ZWxoElr_AmA:4cEx4HpKnUU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=MPdQQlYOz_Q:ZWxoElr_AmA:F7zBnMyn0Lo"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=MPdQQlYOz_Q:ZWxoElr_AmA:F7zBnMyn0Lo" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=MPdQQlYOz_Q:ZWxoElr_AmA:V_sGLiPBpWU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=MPdQQlYOz_Q:ZWxoElr_AmA:V_sGLiPBpWU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=MPdQQlYOz_Q:ZWxoElr_AmA:qj6IDK7rITs"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=qj6IDK7rITs" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=MPdQQlYOz_Q:ZWxoElr_AmA:gIN9vFwOqvQ"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=MPdQQlYOz_Q:ZWxoElr_AmA:gIN9vFwOqvQ" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/schabell/jboss/~4/MPdQQlYOz_Q" height="1" width="1" alt=""/&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/ApmBADhkix8" height="1" width="1" alt=""/&gt;</content><summary>Part 6 - Financial calculationsCloud technology is changing the way payment services are architectured. In this series we will be presenting insight from our customers on adopting open source and cloud technology to modernize their payment service. So far we've presented research-based architectural blueprints of omnichannel customer experience, integrating with SaaS applications, and cloud-native...</summary><dc:creator>Eric D. Schabell</dc:creator><dc:date>2020-10-15T05:00:00Z</dc:date><feedburner:origLink>http://feedproxy.google.com/~r/schabell/jboss/~3/MPdQQlYOz_Q/payments-architecture-financial-calculations-example.html</feedburner:origLink></entry></feed>
